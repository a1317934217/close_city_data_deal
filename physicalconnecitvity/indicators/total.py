#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2022/1/25 19:46
# @Author  : wuhao
# @Email   : guess?????
# @File    : total.py
import datetime

import matplotlib
import networkx as nx
import numpy as np
import pandas as pd
import seaborn as sns
# coding=utf-8
from matplotlib import pyplot as plt
from matplotlib.font_manager import FontProperties
from matplotlib.ticker import FuncFormatter, MaxNLocator
# 根据路径画图
from numpy import array
from sklearn.preprocessing import MinMaxScaler



# 获取时间列表
def getdaylist(begin, end):
    """
    获取时间列表
    """
    beginDate = datetime.datetime.strptime(str(begin), "%Y%m%d")
    endDate = datetime.datetime.strptime(str(end), "%Y%m%d")
    dayList = []
    while beginDate <= endDate:
        dayList.append(datetime.datetime.strftime(beginDate, "%Y%m%d"))
        beginDate += datetime.timedelta(days=+1)
    return dayList



yuzhi_list= [0.0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.17500000000000002, 0.18, 0.185, 0.19, 0.195, 0.2, 0.20500000000000002, 0.21, 0.215, 0.22, 0.225, 0.23, 0.23500000000000001, 0.24, 0.245, 0.25]
# print()
yuzhi_list = [str(i) for i in yuzhi_list]
# listXData = ['20200101', '20200102', '20200103', '20200104', '20200105', '20200106', '20200107', '20200108', '20200109', '20200110', '20200111', '20200112', '20200113', '20200114', '20200115', '20200116', '20200117', '20200118', '20200119', '20200120', '20200121', '20200122', '20200123', '20200124', '20200125', '20200126', '20200127', '20200128', '20200129', '20200130', '20200131', '20200201', '20200202', '20200203', '20200204', '20200205', '20200206', '20200207', '20200208', '20200209', '20200210', '20200211', '20200212', '20200213', '20200214', '20200215', '20200216', '20200217', '20200218', '20200219', '20200220', '20200221', '20200222', '20200223', '20200224', '20200225', '20200226', '20200227', '20200228', '20200229', '20200301', '20200302', '20200303', '20200304', '20200305', '20200306', '20200307', '20200308', '20200309', '20200310', '20200311', '20200312', '20200313', '20200314', '20200315', '20200316', '20200317', '20200318', '20200319', '20200320', '20200321', '20200322', '20200323', '20200324', '20200325', '20200326', '20200327', '20200328', '20200329', '20200330', '20200331', '20200401', '20200402', '20200403', '20200404', '20200405', '20200406', '20200407', '20200408', '20200409', '20200410', '20200411', '20200412', '20200413', '20200414', '20200415', '20200416', '20200417', '20200418', '20200419', '20200420', '20200421', '20200422', '20200423', '20200424', '20200425', '20200426', '20200427', '20200428', '20200429', '20200430', '20200501', '20200502', '20200503', '20201001', '20201002', '20201003', '20201004', '20201005', '20201006', '20201007', '20201008', '20201009', '20201010', '20201011', '20201012', '20201013', '20201014', '20201015', '20201016', '20201017', '20201018', '20201019', '20201020', '20201021', '20201022', '20201023', '20201024', '20201025', '20201026', '20201027', '20201028', '20201029', '20201030', '20201031', '20201101', '20201102', '20201103', '20201104', '20201105', '20201106', '20201107', '20201108', '20201109', '20201110', '20201111', '20201112', '20201113', '20201114', '20201115', '20201116', '20201117', '20201118', '20201119', '20201120', '20201121', '20201122', '20201123', '20201124', '20201125', '20201126', '20201127', '20201128', '20201129', '20201130', '20201201', '20201202', '20201203', '20201204', '20201205', '20201206', '20201207', '20201208', '20201209', '20201210', '20201211', '20201212', '20201213', '20201214', '20201215', '20201216', '20201217', '20201218', '20201219', '20201220', '20201221', '20201222', '20201223', '20201224', '20201225', '20201226', '20201227', '20201228', '20201229', '20201230', '20201231', '20210101', '20210102', '20210103', '20210104', '20210105', '20210106', '20210107', '20210108', '20210109', '20210110', '20210111', '20210112', '20210113', '20210114', '20210115', '20210116', '20210117', '20210118', '20210119', '20210120', '20210121', '20210122', '20210123', '20210124', '20210125', '20210126', '20210127', '20210128', '20210129', '20210130', '20210131', '20210201', '20210202', '20210203', '20210204', '20210205', '20210206', '20210207', '20210208', '20210209', '20210210', '20210211', '20210212', '20210213', '20210214', '20210215', '20210216', '20210217', '20210218', '20210219', '20210220', '20210221', '20210222', '20210223', '20210224', '20210225', '20210226', '20210227', '20210228', '20210301', '20210302', '20210303', '20210304', '20210305', '20210306', '20210307', '20210308', '20210309', '20210310', '20210311', '20210312', '20210313', '20210314', '20210315', '20210316', '20210317', '20210318', '20210319', '20210320', '20210321', '20210322', '20210323', '20210324', '20210325', '20210326', '20210327', '20210328', '20210329', '20210330', '20210331', '20210401', '20210402', '20210403', '20210404', '20210405', '20210406', '20210407', '20210408', '20210409', '20210410', '20210411', '20210412', '20210413', '20210414', '20210415', '20210416', '20210417', '20210418', '20210419', '20210420', '20210421', '20210422', '20210423', '20210424', '20210425', '20210426', '20210427', '20210428', '20210429', '20210430', '20210501', '20210502', '20210503', '20210504', '20210505', '20210506', '20210507', '20210508', '20210509', '20210510', '20210511', '20210512', '20210513', '20210514', '20210515', '20210516', '20210517', '20210518', '20210519', '20210520', '20210521', '20210522', '20210523', '20210524', '20210525', '20210526', '20210527', '20210528', '20210529', '20210530', '20210531', '20210601', '20210602', '20210603', '20210604', '20210605', '20210606', '20210607', '20210608', '20210609', '20210610', '20210611', '20210612', '20210613', '20210614', '20210615', '20210616', '20210617', '20210618', '20210619', '20210620', '20210621', '20210622', '20210623', '20210624', '20210625', '20210626', '20210627', '20210628', '20210629', '20210630', '20210701', '20210702', '20210703', '20210704', '20210705', '20210706', '20210707', '20210709', '20210710', '20210711', '20210712', '20210713', '20210714', '20210715', '20210716', '20210717', '20210718', '20210719', '20210720', '20210721', '20210722', '20210723', '20210724', '20210725', '20210726', '20210727', '20210728', '20210729', '20210730', '20210801', '20210802', '20210803', '20210804', '20210805', '20210806', '20210807', '20210808', '20210809', '20210810', '20210811', '20210813', '20210814', '20210815', '20210816', '20210817', '20210818', '20210819', '20210820', '20210821', '20210822', '20210823', '20210824', '20210826', '20210827', '20210828', '20210829', '20210830', '20210901', '20210902', '20210903', '20210904', '20210905', '20210906', '20210907', '20210908', '20210909', '20210910', '20210911', '20210912', '20210913', '20210914', '20210915', '20210916', '20210917', '20210918', '20210919', '20210920', '20210921', '20210922', '20210923', '20210924', '20210925', '20210926', '20210927', '20210928', '20210929', '20211001', '20211002', '20211003', '20211004', '20211005', '20211006', '20211007', '20211008', '20211009', '20211010', '20211011', '20211012', '20211013', '20211014', '20211015', '20211016', '20211017', '20211018', '20211019', '20211020', '20211021', '20211022', '20211023', '20211024', '20211025', '20211026', '20211027', '20211028']

listXData = ['20200101', '20200102', '20200103', '20200104', '20200105', '20200106', '20200107', '20200108', '20200109', '20200110', '20200111', '20200112', '20200113', '20200114', '20200115', '20200116', '20200117', '20200118', '20200119', '20200120', '20200121', '20200122', '20200123', '20200124', '20200125', '20200126', '20200127', '20200128', '20200129', '20200130', '20200131', '20200201', '20200202', '20200203', '20200204', '20200205', '20200206', '20200207', '20200208', '20200209', '20200210', '20200211', '20200212', '20200213', '20200214', '20200215', '20200216', '20200217', '20200218', '20200219', '20200220', '20200221', '20200222', '20200223', '20200224', '20200225', '20200226', '20200227', '20200228', '20200229', '20200301', '20200302', '20200303', '20200304', '20200305', '20200306', '20200307', '20200308', '20200309', '20200310', '20200311', '20200312', '20200313', '20200314', '20200315', '20200316', '20200317', '20200318', '20200319', '20200320', '20200321', '20200322', '20200323', '20200324', '20200325', '20200326', '20200327', '20200328', '20200329', '20200330', '20200331', '20200401', '20200402', '20200403', '20200404', '20200405', '20200406', '20200407', '20200408', '20200409', '20200410', '20200411', '20200412', '20200413', '20200414', '20200415', '20200416', '20200417', '20200418', '20200419', '20200420', '20200421', '20200422', '20200423', '20200424', '20200425', '20200426', '20200427', '20200428', '20200429', '20200430', '20200501', '20200502', '20200503']
# listXData_anylaze = ['20200101', '20200102', '20200103', '20200104', '20200105', '20200106', '20200107', '20200108', '20200109', '20200110', '20200111', '20200112', '20200113', '20200114', '20200115', '20200116', '20200117', '20200118', '20200119', '20200120']
# listXData=getdaylist(20210101,20210508)
fileNamePath = "F:\\01大连民族\\百度迁徙爬取和数据\\百度迁徙数据-final\\03将两个In和Out相同行合并_最终数据\\"

def draw_every_indeicators():
    # 画图 设置X轴显示效果
    fig = plt.figure(figsize=(10, 6),dpi=450)
    ax = fig.add_subplot(111)
    # 为了设置x轴时间的显示
    def format_fn(tick_val, tick_pos):
        if int(tick_val) in range(len(listXData)):
            return listXData[int(tick_val)]
        else:
            return ''

    #
    ax.xaxis.set_major_formatter(FuncFormatter(format_fn))
    ax.xaxis.set_major_locator(MaxNLocator(integer=True))

    # plt.ylim((-5, 40))
    # 横坐标每个值旋转90度
    # plt.xticks(rotation=90)

    plt.rcParams['font.sans-serif'] = ['SimHei']
    # 坐标轴ticks的字体大小
    ax.set_xlabel('日期', fontsize=14)  # 为x轴添加标签
    ax.set_ylabel('数值', fontsize=14)  # 为y轴添加标签  数值

    # 全局效率
    listGlobalEfficiency_original = [0.22598867485050303, 0.2535595386719805, 0.2951215451216049, 0.2973173957930734, 0.3049631780817071, 0.3032574191600879, 0.2993835322069657, 0.30934138391128113, 0.3112404192706714, 0.2964474259770993, 0.30091227209044386, 0.2892727747417864, 0.2988821426267356, 0.28713238344127584, 0.28758556580864847, 0.2799082593820348, 0.2762467004758683, 0.27756776362050506, 0.26868675013053506, 0.2683559228297336, 0.2773441618390486, 0.2647328677025872, 0.23935910429805798, 0.17988488397249355, 0.07045449472510476, 0.13359281799738795, 0.0953108862864593, 0.07671191069861179, 0.0469258917826783, 0.04546381315115123, 0.04296096375794973, 0.03468264972948836, 0.0448636415314612, 0.033895318943295547, 0.027355637657361764, 0.027950619096559444, 0.03138058324104825, 0.03199640778609177, 0.033427456382001675, 0.02573408792650911, 0.026830243547800735, 0.025042016806722668, 0.02548517310976555, 0.022974222746950015, 0.021904571504731428, 0.022385225276551284, 0.022881355932203386, 0.026355330129442495, 0.02559028443592201, 0.02962241865652544, 0.03131783340116673, 0.03280703227793182, 0.040411359278421224, 0.03989199644857323, 0.052278566385320586, 0.05235550372120591, 0.05306470319540383, 0.05560521535643034, 0.055295396699963785, 0.060441277387762574, 0.05600019984940896, 0.052690682275834795, 0.0575081446232631, 0.06417272592916222, 0.06141764318264525, 0.06362122271388178, 0.06396819654048166, 0.057913741423181384, 0.060015230638780864, 0.0648078770469034, 0.06583723265654522, 0.07251551069934387, 0.07640928195157966, 0.08400530188532764, 0.10138292373395397, 0.08428376277700003, 0.0814476385547203, 0.0814291523192676, 0.07520545261622551, 0.11030807843700653, 0.13162661821360913, 0.12107150878056185, 0.11633171784123249, 0.11384840148843155, 0.13040646156247637, 0.1272916634347365, 0.11717998255323005, 0.12228142717339006, 0.13499780079055737, 0.13596757780438265, 0.14380052498891066, 0.14080785624910222, 0.09221746314302041, 0.10351816366780188, 0.1459753374739022, 0.1508024487986933, 0.10198386086603621, 0.09946390964442617, 0.11889175116352017, 0.05669884993055819, 0.12043256912368393, 0.14868854453137906, 0.14758178478111392, 0.15215347349984226, 0.15335822981122046, 0.15273366637421956, 0.15373498201230307, 0.15514932126315154, 0.14778552432395103, 0.15536760358044305, 0.15311271212675223, 0.15010136328543458, 0.14863064271797483, 0.1201146682155315, 0.15229955041453155, 0.15249907447080382, 0.1435294496471538, 0.14126389065439926, 0.1521600435425559, 0.1469080903638029, 0.1553309767332616, 0.23736759131476257, 0.18313804165647646, 0.17261607531869708]
    # # 平均点连通性
    # averagenodeconnectivity_original = [1.4870034729759063, 1.1694896304991895, 1.9654004532053313, 2.460462640340689, 2.2954392541330257, 2.133976964769648, 2.1158536585365852, 2.397018970189702, 2.4661246612466123, 2.330401306011062, 2.5040650406504064, 2.340349865436371, 2.319928377855207, 2.102424506387921, 2.046660656416754, 2.0558704453441297, 2.0200889547813197, 2.123739418476261, 2.1233012107734126, 2.206821248926512, 2.4757681343047198, 2.274457250067006, 1.9691870521373858, 1.5212740544127406, 0.5172706267731274, 1.275126333520494, 0.6313528575160363, 0.46736353077816495, 0.20473225404732254, 0.1962962962962963, 0.17726671953476078, 0.09968173902600132, 0.18638158232066862, 0.09321116802539499, 0.056896551724137934, 0.05971223021582734, 0.06380441264162194, 0.06544049047047848, 0.06831955922865014, 0.04908956692913386, 0.053082795067527895, 0.04677871148459384, 0.0464213631423692, 0.04104683195592287, 0.03811808609889378, 0.039595499216635806, 0.04130465745620282, 0.06420650451961607, 0.06434004474272931, 0.07976889385891343, 0.08896658896658896, 0.0936277892799632, 0.15522054718034617, 0.16099962839093274, 0.25607142857142856, 0.24825396825396825, 0.2773062139654068, 0.29035874439461884, 0.28700341146693076, 0.34024823318448716, 0.3200075287031809, 0.2806251436451391, 0.3064806669180177, 0.35378176129877814, 0.348559486490521, 0.35835075749238837, 0.3386433897072195, 0.32532360723735965, 0.31739811912225707, 0.34518571943743237, 0.39993363198938114, 0.4697009272561055, 0.5070916334661355, 0.562905317769131, 0.8031852321056918, 0.5842087935111191, 0.5427261484631858, 0.5513513513513514, 0.5060396010646077, 0.9045254646049085, 1.140139401394014, 1.097688040325533, 1.0023876709355328, 0.9328927440451604, 1.1507759930540482, 1.139449747965419, 0.9835210564278977, 0.9993115792372298, 1.187594964184936, 1.1987790311877904, 1.294313644499518, 1.1238471673254282, 0.5881612586037365, 0.737610091058367, 1.3503309214361647, 1.367514094245293, 0.701803101334295, 0.6823640127987954, 0.8905579399141631, 0.26164514586322335, 0.8371236386931454, 1.219682852220386, 1.297991967871486, 1.3261490758754864, 1.289255675709859, 1.3375298804780877, 1.2931314741035858, 1.3151807228915662, 1.1920464934047277, 1.320035548533623, 1.295860862806063, 1.2725058424673314, 1.2071897425432778, 1.0032775453277545, 1.2820841973601922, 1.3184342589494815, 1.297223592966782, 1.258193445243805, 1.4403660396542959, 1.3906810035842294, 1.4472606246799795, 2.797691637630662, 2.449343638817323, 2.2093485461906512]
    averagenodeconnectivity_original = [1.7536036153027037, 1.2447430830039525, 1.0148374253483743, 1.2646318966962937, 0.11711145996860282, 0.14676286310992975, 0.19597774925117672, 0.7615824224601898, 0.7557521163446929, 0.46033727106492905, 0.7732439129497953, 0.7824282355672946, 0.7916522640857242, 0.79367286139878, 1.0460882590160157, 1.141807811959903, 0.8403623403623404, 1.0464627261205208, 0.9209326361867705, 0.7929599131300334, 0.8004322989038135, 0.8069198766873186, 0.8420166603779061, 0.6132778330769463, 0.9717849717849718, 0.5903799019607843, 0.8351612997572461, 0.8211028696498055, 0.551111513286882, 0.772709586663075, 0.31106686577069853, 0.791923629297964, 0.7292508455299153, 0.7075744179192455, 0.7031185031185031, 0.7151745592810231, 0.7583431158812678, 0.7644488579940417, 0.804109946884161, 0.633218982275586, 0.5814725492977727, 0.5104611996372587, 0.5351494745434139, 1.4706038487060384, 1.7679513389364225, 1.7383070665988816, 1.9908976044970474, 2.2007625826131165, 1.572928317234367, 1.519431643625192, 1.3932140427980955, 1.4029194788887145, 1.7156258234519104, 1.4123954877239548, 1.3616987392169875, 1.3416323822163239, 1.5074571805006587, 1.957572288856816, 1.522951251646904, 1.529101628444537, 1.3479578392621872, 1.3593412384716732, 1.3105053008398733, 1.3466224286662243, 1.6037366548042704, 1.2451227604512276, 1.5549411162314388, 1.3261070110701108, 1.352248189148558, 1.3433945514065362, 1.3744664031620553, 1.6772258995670133, 1.4802223203386748, 1.6071428571428572, 1.4959572389841544, 1.4555296288257, 1.5293032342088126, 1.5625215660252156, 1.7449564772145418, 1.5449525964231847, 1.5454173067076293, 1.4829197080291971, 1.4746129782626134, 1.486640810170222, 1.6484639016897082, 1.7894540387199522, 1.7446303727821104, 1.7322699447568806, 1.6090478864201492, 1.5344776877623594, 1.535121741004094, 1.7865574016991204, 2.604363790425081, 2.2978284873021715, 2.399819692502619, 1.9994069681245368, 1.4740013271400132, 1.3503621702883695, 1.5537225960494898, 1.7232942887567202, 1.5431187645209785, 1.6337812911725955, 1.6003016591251886, 1.8424018907617588, 1.8060906113818622, 1.9739618575044482, 2.04536926488146, 1.933739317845776, 1.9798635140330643, 1.752252944188428, 1.6620003636080305, 1.63781196044577, 1.7569170470075552, 1.860010240655402, 1.6870374668007528, 1.7080901177675372, 1.6776376907763768, 1.6428458498023715, 1.638479262672811, 2.2582733135621145, 4.583921641965496, 3.824442470428725, 3.7453597643648604, 3.041727055963346, 3.173804291925756, 2.350986207221202, 1.7573004214936523, 1.636051588803917]
    # # 连通性损失
    connectivityloss_original =  [0.07158304498269887, 0.07262196480285141, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.013888209692405536, 0.01393659587565407, 0.013888209692405536, 0.01393659587565407, 0.013888209692405536, 0.013840158311986305, 0.013840158311986305, 0.01393659587565407, 0.11890247933884322, 0.6439310063516119, 0.14550588736746745, 0.5710939871907948, 0.5988168418269545, 0.8352479338842979, 0.834790809327847, 0.8408152531229452, 0.9066260563169984, 0.8311396796245283, 0.9126178780164211, 0.9434482758620687, 0.9415306122448975, 0.9334911242603532, 0.9310595544979835, 0.9312205450447372, 0.9490966796875, 0.9460987121962608, 0.9504166666666667, 0.948137888581101, 0.9540331944539299, 0.957234450393284, 0.956147164748251, 0.9524751076901338, 0.9413670229996772, 0.9429333333333327, 0.9294275533342599, 0.9205246913580244, 0.9160188995579941, 0.8563420115653646, 0.8615477071005924, 0.7794172839506167, 0.7907160493827169, 0.7871492346938785, 0.7702885841836734, 0.7770472642267525, 0.7736909367833197, 0.7909521935495953, 0.8246219561030499, 0.809115739871978, 0.7615941419072444, 0.7790205112960739, 0.7634597121776614, 0.7776188320507008, 0.8127258808239419, 0.7955558858501768, 0.7595518529158278, 0.7593363738515441, 0.704051768990637, 0.67284646275456, 0.6439516855958178, 0.4010275824770163, 0.6177904324622471, 0.6399855777897968, 0.6395857988165675, 0.6823611677641179, 0.29945163661032126, 0.10642556610067908, 0.12891189384056453, 0.27938473183390894, 0.27569272976680426, 0.10604995674740453, 0.10795494396049908, 0.2765854534901401, 0.2696021947873806, 0.10604995674740453, 0.11160330578512424, 0.06482853223593966, 0.17166095088173006, 0.6604667554232915, 0.5835686682520781, 0.10337408646950315, 0.09730951204011003, 0.5143995978167201, 0.5807987106688415, 0.29435060509495414, 0.8237001784651994, 0.32497608418367363, 0.09691707077957301, 0.04710400000000002, 0.053293766748928745, 0.046737213403880006, 0.046919890160473626, 0.046919890160473626, 0.04710400000000002, 0.07079214360041668, 0.07107148125686322, 0.07809551458847477, 0.07870969856906396, 0.07221121441514634, 0.21295138888888934, 0.07107148125686322, 0.07163681799250368, 0.10354018943118852, 0.10372425842422424, 0.09551550765567841, 0.10318469701057331, 0.10283163265306133, 0.02061631944444461, 0.020758961318402113, 0.020758961318402113]
    # # 自然连通性
    naturalconnectivity_original = [3.8054211516065135, 4.189661893412327, 5.815635509505449, 6.2575356473157315, 6.495924837711522, 6.101382569388786, 6.042802196637723, 6.54132670808149, 6.7659906497323865, 6.070756672664894, 6.255365269235537, 5.312224509519529, 5.7242177874758, 5.238420365920898, 5.284454694251656, 5.01873187728914, 4.6195159637947, 4.902559251198258, 4.581515199732916, 4.553608012837706, 4.888824492083416, 4.340743765359146, 3.958869428897951, 3.1580743584607647, 2.4532991690644463, 3.826970184151142, 3.185306653208051, 2.272478425586528, 1.9224243425377507, 1.6875987107719514, 1.4241767844375044, 1.1843099181064112, 1.3501382161677478, 1.1779588057665615, 1.0068654090954643, 0.9591263765511722, 0.9549784975292833, 0.9108907783592766, 1.0127400003165794, 0.9110228849250827, 0.962932622075445, 0.8643395539568397, 0.773339002998245, 0.7690104040745711, 0.7641323690701971, 0.7743908379173462, 0.7174330188402992, 1.0231040229077941, 1.031220841841568, 1.0728923128757877, 1.075706335933197, 1.2092959692499317, 1.3708873855994008, 1.3247716559564846, 1.6643307033737536, 1.639692475157782, 1.6427462495041156, 1.6194756989410886, 1.8101346089828874, 2.0930715739450787, 1.9816221052133336, 1.9755974856465264, 1.969227980018581, 1.976156912642961, 1.9787349160850156, 2.1256313968406912, 2.372593727281496, 2.1458544637529497, 2.5769202400259674, 2.3579150526149166, 2.2382183327732617, 2.4005282861791923, 2.624630573785448, 3.207923309536434, 2.8083979474742105, 3.147583518140432, 2.80023951794792, 2.7930670961914887, 2.856617555096874, 3.1069287198215316, 3.618273860575515, 3.329034879538445, 3.4955640852681493, 3.2142352841728874, 3.2358774714696614, 3.165957791280254, 3.2995138440682643, 3.379579195338067, 3.68127597358591, 3.7398041445963175, 3.6314436733089117, 3.3238577221119896, 2.9862818271500897, 3.3480315847451836, 3.8322700595773544, 4.463167246716932, 2.8004552389569937, 2.922353243991577, 2.6244226598473213, 2.197670242003376, 2.901925271173437, 3.4348219158618334, 3.4971064779915704, 3.895989971442967, 3.7065415181986223, 3.722149850865753, 3.7516791305090673, 3.8868387620746954, 3.759759258550909, 3.970183030794682, 4.064482664466997, 3.86997776696022, 3.791220427017696, 3.1570101401874706, 3.926812959279974, 3.964796449918724, 3.6385047405465376, 3.7800432099633796, 4.057582723926704, 3.8459571840578124, 4.040433691340066, 6.609114940168138, 5.063703957021435, 6.2383864933104896]
    # # 连通数量
    numberofconnectedcomponents_original =  [4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 6, 16, 5, 7, 8, 17, 18, 24, 26, 23, 25, 30, 30, 26, 26, 25, 31, 28, 30, 29, 32, 33, 35, 34, 32, 34, 31, 31, 28, 23, 23, 18, 17, 18, 16, 17, 16, 15, 16, 16, 15, 15, 15, 13, 15, 15, 13, 12, 12, 9, 9, 8, 6, 8, 8, 9, 7, 4, 5, 5, 5, 4, 4, 5, 5, 4, 4, 3, 6, 8, 7, 4, 4, 5, 7, 7, 19, 8, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 4, 4, 4, 5, 3, 4, 4, 2, 2, 2]
    # # 最大组件大小
    sizeoflargestcomponent_original =  [262, 258, 287, 288, 289, 288, 288, 288, 288, 287, 288, 289, 288, 288, 287, 284, 283, 284, 283, 284, 285, 285, 283, 258, 26, 253, 148, 138, 67, 66, 64, 36, 65, 33, 12, 12, 12, 12, 12, 5, 12, 12, 13, 11, 11, 12, 15, 24, 24, 29, 32, 36, 59, 57, 71, 72, 67, 70, 71, 73, 40, 37, 40, 71, 70, 71, 73, 49, 40, 72, 71, 72, 82, 100, 197, 92, 99, 101, 86, 221, 256, 249, 229, 228, 257, 252, 227, 229, 257, 259, 261, 210, 91, 116, 229, 226, 144, 127, 195, 62, 183, 227, 244, 250, 246, 245, 245, 244, 239, 238, 239, 237, 234, 212, 238, 236, 263, 264, 267, 264, 265, 285, 283, 283]
    # 多样性diversity
    diversity_list_original = [11.0467565,10.4143791,10.6792618,11.0069565,9.9716660,10.0317932,10.3805282,10.0761682,10.0819356,11.2123333,10.2053234,11.5267687,10.0794179,11.5911497,11.7364349,13.2694664,13.1451618,13.2131232,12.6325567,12.7940908,12.7770136,13.2578961,12.6030407,12.2881047,8.8804149,14.5395934,9.2148215,8.8236343,5.3748400,5.0241039,4.7363455,2.9934321,4.8584100,2.9738584,1.5617269,1.5347276,1.6017368,1.6411879,1.5619876,1.1773876,1.0977770,1.0001860,0.9387184,0.9570712,0.9282921,0.9677364,0.8564552,1.6862088,1.6370544,1.8882165,1.8938516,2.4721189,4.1122906,4.0887557,5.4418823,5.2805352,5.4263654,5.7740654,5.5846699,6.0871438,5.9308016,5.2490831,5.6893103,6.1159627,6.0157129,6.1593232,6.0997549,5.7190474,5.6616516,6.2623960,6.8609723,8.2477435,8.9890626,9.0097453,10.9431358,9.5056976,9.3665674,9.1987167,9.0442273,12.4817441,14.2590462,14.5927920,13.0451373,12.6186540,14.4169829,14.9150280,13.2162682,13.2225916,15.1895861,14.5080729,15.0427307,14.1016622,7.8051120,10.8486409,14.5584666,14.2350807,10.8333104,9.8169816,11.8762854,4.9241581,11.1379929,14.4928798,14.9742964,14.9672658,14.9990497,14.8512505,14.9155360,15.1878305,14.6268763,15.1428321,15.0267199,14.5349963,14.3708121,13.7816079,14.6260605,14.6799684,17.1097417,18.2793736,18.7497485,17.3960220,17.4886341,14.7077254,17.7568586,18.3017645]

    #城市度
    city_degree =  [10, 8, 10, 7, 3, 5, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 6, 7, 7, 6, 7, 7, 7, 7, 8, 7, 7, 7, 8, 8, 7, 8, 7, 9, 9, 9, 8, 8, 9, 9, 8, 9, 9, 9, 8, 10, 9, 9, 9, 10, 11, 10, 11, 10, 10, 10, 10, 10, 9, 10, 10, 10, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 16, 14, 14, 12, 15, 10, 10, 9]

    #边数量
    edge_number =[690, 580, 567, 553, 230, 291, 354, 489, 499, 445, 494, 463, 469, 482, 507, 519, 466, 512, 463, 462, 451, 462, 477, 444, 489, 451, 462, 444, 432, 452, 378, 483, 437, 438, 433, 453, 468, 459, 464, 463, 458, 404, 372, 581, 697, 708, 659, 686, 619, 573, 555, 558, 561, 547, 533, 519, 546, 670, 592, 602, 560, 540, 533, 556, 618, 558, 594, 543, 533, 527, 571, 649, 586, 619, 567, 564, 565, 589, 653, 579, 615, 574, 566, 564, 612, 667, 623, 662, 589, 574, 564, 645, 887, 763, 791, 744, 585, 550, 583, 648, 572, 616, 596, 646, 650, 689, 758, 687, 721, 640, 623, 620, 651, 670, 622, 642, 609, 610, 631, 809, 1321, 1152, 1119, 970, 1064, 879, 652, 622]

    # naturalconnectivity_original = [5.338485809949616, 4.1384558736732755, 4.154797141348051, 4.56590678024899,
    #                        1.7861368731245841, 1.857511791779425,
    #                        2.356458607520877, 3.648963175844479, 3.5721055238247943, 3.0401369077809717,
    #                        3.869393969695898, 3.471205038067731,
    #                        3.5085100616330593, 3.6152296507753645, 3.854968392332401, 4.075763395758497,
    #                        3.4494362652488646,
    #                        4.079767593767769, 3.5689419248227243, 3.4794408064426072, 3.262505905365234,
    #                        3.28981600450315, 3.3400498974970154,
    #                        2.924419039825867, 3.6235773695106124, 3.1817396530387714, 2.9554995551708454,
    #                        2.748052266190666,
    #                        2.5768747093941005, 2.637266547151605, 2.114571754514558, 2.8914351443095647,
    #                        2.4662938970010857,
    #                        2.4071065946952945, 2.3672447993952215, 2.5156469779854755, 2.5858346323815584,
    #                        2.5048457161230147,
    #                        2.610155500088888, 2.6034160126100687, 2.586341286884413, 2.5002480221458203,
    #                        2.1371808396438947,
    #                        3.0529624730515015, 4.318154186435999, 4.831549936020316, 3.99953271891926,
    #                        3.710211836739818, 3.286165233289432,
    #                        3.0110890490700646, 2.9629365408985016, 3.0663294044375533, 3.172768987625495,
    #                        3.10760756706035,
    #                        3.0856232857001875, 3.06455621381009, 3.423595866022333, 4.582730003453658,
    #                        4.013763015883646, 4.623435253934492,
    #                        3.997425729345708, 3.8173563314524084, 3.9832697177181933, 4.301580100692075,
    #                        4.873528492822255, 4.01028663249428,
    #                        4.455725887293394, 4.025673973916762, 4.047604145007683, 4.055318307035212,
    #                        4.384716770238273, 4.9883525252374055,
    #                        4.330687818334178, 5.114095355561475, 4.6262614034726175, 4.664293790392838,
    #                        4.627488589974128, 5.076305693699982,
    #                        5.3992890106051155, 4.585689170983953, 5.368522737471448, 4.736092765086499,
    #                        4.676130301437808, 4.6464280931764925,
    #                        4.897961263269433, 5.306467432700763, 4.778982403453492, 6.047648146330421,
    #                        5.0380180357614135, 4.817701503093339,
    #                        4.482112859234563, 5.239822249181353, 7.183087463617335, 5.602003799853385,
    #                        5.918310627409534, 6.547755220673942,
    #                        4.8313977948400275, 4.489123240982017, 4.914514308311936, 5.561064677251466,
    #                        4.577321161802341, 5.536022891204519,
    #                        4.9586522680094935, 5.597810588642002, 5.874851569456045, 6.004961696293702,
    #                        6.5033777827879256, 5.650944366592504,
    #                        6.316450564107824, 5.7027554000329, 5.653423418081362, 5.561218667127857, 5.867730160516466,
    #                        5.886645727258564,
    #                        5.48659586774716, 5.86262505158895, 5.400400818115451, 5.271239186343177, 5.470939304387496,
    #                        7.0638806442629924,
    #                        11.508407182175644, 10.075309609959351, 9.591807672390091, 8.224418982162119,
    #                        9.441637399876145, 8.048515931430615,
    #                        5.559415650167205, 5.076219162152303]
    #边连通性
    edgeconnecity_original = [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    #点连通性
    nodeconnecity_original =[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    #代数连通性
    algebraicconnecity_original = [0.0, 0.0, 0.051717592610140375, 0.05201935664827583, 0.09474759396991793, 0.1049005307096218, 0.05251026461510927, 0.12098672342703104, 0.11695189626837091, 0.05246544651519204, 0.10474641792268545, 0.05115705278703641, 0.10231738860037176, 0.051108039547699574, 0.05106810120460604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    #平均最短路径长度
    averageshortlength_original =  [8.43676991021029, 7.828100021114229, 3.7799517555615116, 3.774075687185443, 3.619136870434448, 3.61774099883856, 3.710462640340689, 3.540819783197832, 3.524946767324816, 3.7680612070855974, 3.6780391018195897, 3.8791330257593235, 3.698364305071622, 3.9012291908633374, 3.8956409444214324, 4.993828696560991, 5.044933964864797, 5.033444483153337, 5.201162819838108, 5.203180212014134, 5.03807758833704, 5.271435631331851, 5.837831741974288, 12.480083250384581, 35.24476044926376, 16.651609260304912, 20.898821595436328, 24.907870052300392, 39.757369371921605, 41.467871017871026, 45.78059856809857, 46.47159692159692, 43.44917455511968, 45.435150375939855, 46.29118071471013, 44.80913122824888, 40.61895212630506, 39.47722604193193, 38.37095959595959, 44.586796536796534, 43.73030303030303, 43.436868686868685, 41.949000999001, 45.52611832611833, 46.52784992784993, 45.273737373737376, 45.38492063492064, 48.36115502854633, 50.160154338415204, 46.92138378862517, 46.04711144590178, 45.96940836940837, 45.25208269553682, 45.060224337066444, 38.41647117699597, 38.06930551514818, 36.693763883468264, 34.69409146364322, 35.71241530275541, 33.05249158860978, 32.77481865660458, 33.731304850305875, 31.803559477425175, 30.978582414121675, 32.00601990178649, 31.538173637950553, 29.337975372380562, 32.042030273170624, 30.923700673464126, 29.995444264806224, 29.496218765584963, 28.44474189505201, 25.11603747821499, 24.227367822882492, 23.375576753098603, 22.218470431058158, 24.162873235614722, 24.41036592736164, 26.381459984293567, 21.697830992536876, 16.291898634453784, 18.76912720004442, 18.814267595237485, 19.343662820593032, 16.266809106911246, 16.687503952444192, 19.0468470304734, 17.86547821799488, 15.877886441541598, 15.79940738080273, 13.006997600101048, 16.486466165413532, 20.835750633191022, 18.74434322695501, 14.278786485865318, 13.596519174041298, 18.0383375415021, 19.73157118472079, 19.725685082386114, 37.45724146120962, 20.206431273644387, 13.653932920094084, 12.712676246373878, 12.221847389558233, 12.056230296996848, 12.113951154232184, 12.022917363666778, 11.95699251163732, 13.604825193675797, 13.018561855121796, 13.148761764119874, 13.454787956804692, 13.590202120245038, 18.608992973357115, 13.229177747048187, 13.25904555836038, 13.857466371256173, 15.056100110282621, 12.073034987878277, 13.545237546568346, 12.61810558414332, 6.39592290585619, 8.56168709119615, 9.593489211337493]
    averageshortlength_original_anlalyze =  [8.43676991021029, 7.828100021114229, 3.7799517555615116, 3.774075687185443, 3.619136870434448, 3.61774099883856, 3.710462640340689, 3.540819783197832, 3.524946767324816, 3.7680612070855974, 3.6780391018195897, 3.8791330257593235, 3.698364305071622, 3.9012291908633374, 3.8956409444214324, 4.993828696560991, 5.044933964864797, 5.033444483153337, 5.201162819838108, 5.203180212014134]



    #连接数量
    list_number_connect = [350, 349, 321, 316, 314, 295, 286, 260, 229, 160, 137, 135, 83, 83, 83, 82, 43, 42, 40, 40,
                           38, 38, 35, 22, 21, 17, 17, 17, 16, 16, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10,
                           10, 10, 10, 9, 9, 9, 8, 8]
    #弱连接数量
    list_weaker_number =[1, 2, 11, 19, 26, 36, 48, 65, 78, 92, 104, 111, 122, 133, 139, 152, 161, 170, 182, 187, 193,
                          198, 206, 217, 225, 230, 231, 236, 239, 245, 251, 255, 260, 264, 271, 273, 274, 277, 281, 283,
                          286, 286, 288, 289, 290, 293, 300, 303, 303, 307, 309]
    # data_all_indicators = []
    # data_all_indicators.append(listGlobalEfficiency_original)
    # data_all_indicators.append(averagenodeconnectivity_original)
    # data_all_indicators.append(connectivityloss_original)
    # data_all_indicators.append(naturalconnectivity_original)
    # data_all_indicators.append(numberofconnectedcomponents_original)
    # data_all_indicators.append(sizeoflargestcomponent_original)
    # data_all_indicators.append(diversity_list_original)
    # data_all_indicators.append(averageshortlength_original)
    headers = ['全局效率', '平均点连通性', '连通性损失','自然连通性', '连通数量', '最大组件大小','Diversity', '平均最短路径长度']
    # 数据有8列，8个指标 columns=headers,
    # test = pd.DataFrame(data=data_all_indicators)
    # test =test.T
    # test.to_csv('indictors.csv',index=None, encoding="utf_8_sig",columns=headers)





    # 根据需要设置最大最小值，这里设置最大值为1.最小值为0
    # 数据归一化
    tool = MinMaxScaler(feature_range=(0, 1))
    # 这里是经过处理后的数据
    # 标准化，注意这里的values是array
    # 全局效率
    listGlobalEfficiency = tool.fit_transform(array(listGlobalEfficiency_original).reshape(-1,1)).tolist()
    # 平均点连通性
    averagenodeconnectivity = tool.fit_transform(array(averagenodeconnectivity_original).reshape(-1,1)).tolist()
    # 连通性损失 需要进一步处理 1-所有数值
    # connectivityloss_need_deal = tool.fit_transform(array(connectivityloss_original).reshape(-1,1)).tolist()
    # 自然连通性
    naturalconnectivity = tool.fit_transform(array(naturalconnectivity_original).reshape(-1,1)).tolist()


    # 连通数量  需要进一步处理 1-所有数值
    numberofconnectedcomponents_need_deal = tool.fit_transform(array(numberofconnectedcomponents_original).reshape(-1,1)).tolist()
    # 最大组件大小
    sizeoflargestcomponent = tool.fit_transform(array(sizeoflargestcomponent_original).reshape(-1,1)).tolist()
    # 多样性diversity
    diversity_list = tool.fit_transform(array(diversity_list_original).reshape(-1,1)).tolist()



    # 边连通性
    edgeconnecity =tool.fit_transform(array(edgeconnecity_original).reshape(-1,1)).tolist()
    # 点连通性
    nodeconnecity = tool.fit_transform(array(nodeconnecity_original).reshape(-1,1)).tolist()
    # 自然连通性
    algebraicconnecity =tool.fit_transform(array(algebraicconnecity_original).reshape(-1,1)).tolist()



    # 平均最短路径长度
    averageshortlength_need_deal =tool.fit_transform(array(averageshortlength_original).reshape(-1,1)).tolist()
    edge_number = tool.fit_transform(array(edge_number).reshape(-1,1)).tolist()
    city_degree = tool.fit_transform(array(city_degree).reshape(-1,1)).tolist()
    connectivityloss=[]
    numberofconnectedcomponents=[]
    averageshortlength =[]
    # 做1- 进行反转图像
    # for connectivityloss_sigle in connectivityloss_need_deal:
    #     connectivityloss.append(1 - float(str(connectivityloss_sigle)[1:-1]))
    #
    # for numberofconnectedcomponents_sigle in numberofconnectedcomponents_need_deal:
    #     numberofconnectedcomponents.append(1-float(str(numberofconnectedcomponents_sigle)[1:-1]))




    for averageshortlength_single in averageshortlength_need_deal:
        averageshortlength.append(1-float(str(averageshortlength_single)[1:-1]))



    plt.plot(yuzhi_list, list_number_connect, "+--", linewidth=1,  label='最大组件内城市数量')
    plt.plot(yuzhi_list, list_weaker_number, "4-", linewidth=1, label='弱连接数量')

    plt.plot(listXData, listGlobalEfficiency, "+--", linewidth=1,  label='全局效率')
    plt.plot(listXData, averagenodeconnectivity, "4-", linewidth=2,  label='平均点连通性')
    plt.plot(listXData, connectivityloss, "2--", linewidth=1,  label='连通性损失')
    plt.plot(listXData, naturalconnectivity, "1--", linewidth=1,  label='自然连通性')

    # plt.plot(listXData, edge_number, ".-", linewidth=1,  label='边数量')
    # plt.plot(listXData, city_degree, ".-", linewidth=1,  label='石家庄度')


    plt.plot(listXData, numberofconnectedcomponents_need_deal, "3--", linewidth=2, label='连通数量')
    plt.plot(listXData, sizeoflargestcomponent, "1--", linewidth=2,  label='最大组件大小')
    plt.plot(listXData, diversity_list, ".--", linewidth=2,  label='Diversity')
    #
    plt.plot(listXData, edgeconnecity, ".-", linewidth=2,  label='边连通性')
    plt.plot(listXData, nodeconnecity, "<-", linewidth=2,  label='点连通性')
    plt.plot(listXData, algebraicconnecity, ">--", linewidth=2,  label='代数连通性')
    # plt.plot(listXData_anylaze, averageshortlength_original_anlalyze, "<--", linewidth=1,   label='平均最短路径长度')

    # plt.scatter(6, 1, s=50, color='cyan')
    # plt.plot([6, 6], [1, 0], 'x--', lw=1.5)
    # plt.text(0, 0.90, r'石家庄封城开始', fontdict={'size': '14', 'color': 'black'})
    #
    # plt.scatter(28, 1, s=50, color='cyan')
    # plt.plot([28, 28], [1, 0], 'x--', lw=1.5)
    # plt.text(27, 0.90, r'石家庄封城结束', fontdict={'size': '14', 'color': 'black'})




    # 定义坐标one 20200125  26  3.826970184151142  0.38  8.8
    x0_one = 24
    y0_one = 1
    # 定义坐标two 20200409  226  4.463167246716932  0.49  4.9
    x0_two = 99
    y0_two = 1
    # 定义坐标three 20200501  285   6.609114940168138  0.47  0.66  14.7
    x0_three = 121
    y0_three = 1

    # 定义坐标four 20200314  73   6.609114940168138  0.47  0.66  14.7
    x0_four = 74
    y0_four = 1




    # 画点1
    # plt.scatter(x0_one, y0_one, s=50, color='cyan')
    # # 画点2
    # plt.scatter(x0_two, y0_two, s=100, color='cyan')
    # # 画点3
    # plt.scatter(x0_three, y0_three, s=100, color='cyan')
    # # 画点4
    # plt.scatter(x0_four, y0_four, s=100, color='cyan')
    #
    # 画虚线1
    # plt.plot([x0_one, x0_one], [y0_one, 0], 'x--', lw=1)
    # plt.text(25, y0_one, r'2020年1月25日', fontdict={'size': '15', 'color': 'black',"FontProperties":font})
    # # 画虚线2
    # plt.plot([x0_two, x0_two], [y0_two, 0], 'x--', lw=1)
    # plt.text(100, y0_two, r'2020年4月9日', fontdict={'size': '15', 'color': 'black',"FontProperties":font})
    # # 画虚线3
    # plt.plot([x0_three, x0_three], [y0_three, 0], 'x--', lw=1)
    # plt.text(122, y0_three, r'2020年5月01日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画虚线4
    # plt.plot([x0_four, x0_four], [y0_four, 0], 'x--', lw=1)
    # plt.text(75, y0_four, r'2020年3月14日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})





    # # 画点5 # 画虚线5 01
    # plt.scatter(0, 1, s=50, color='cyan')
    # plt.plot([0 ,0], [1, 0], 'x--', lw=2)
    # plt.text(0, 1, r'1日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点6 # 画虚线6 04
    # plt.scatter(3, 1, s=50, color='cyan')
    # plt.plot([3, 3], [1, 0], 'x--', lw=2)
    # plt.text(3, 1, r'4日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点7 # 画虚线7 06
    # plt.scatter(5, 1, s=50, color='cyan')
    # plt.plot([5, 5], [1, 0], 'x--', lw=2)
    # plt.text(5, 1, r'6日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点8 # 画虚线8 11
    # plt.scatter(10, 1, s=50, color='cyan')
    # plt.plot([10, 10], [1, 0], 'x--', lw=2)
    # plt.text(10, 1, r'11日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点9 # 画虚线9 16
    # plt.scatter(15, 1, s=50, color='cyan')
    # plt.plot([15, 15], [1, 0], 'x--', lw=2)
    # plt.text(15, 1, r'16日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点10 # 画虚线10 21
    # plt.scatter(20, 1, s=50, color='cyan')
    # plt.plot([20, 20], [1, 0], 'x--', lw=2)
    # plt.text(20, 1, r'21日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})

    # 画点11 # 画虚线11 01
    # plt.scatter(34, 1, s=50, color='cyan')
    # plt.plot([34, 34], [1, 0], 'x--', lw=2)
    # plt.text(34, 1, r'4日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点12 # 画虚线6 04
    # plt.scatter(37, 1, s=50, color='cyan')
    # plt.plot([37, 37], [1, 0], 'x--', lw=2)
    # plt.text(37, 1, r'7日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点13 # 画虚线7 06
    # plt.scatter(39, 1, s=50, color='cyan')
    # plt.plot([39, 39], [1, 0], 'x--', lw=2)
    # plt.text(39, 1, r'9日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点14 # 画虚线8 11
    # plt.scatter(42, 1, s=50, color='cyan')
    # plt.plot([42, 42], [1, 0], 'x--', lw=2)
    # plt.text(42, 1, r'12日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点15 # 画虚线9 16
    # plt.scatter(43, 1, s=50, color='cyan')
    # plt.plot([43, 43], [1, 0], 'x--', lw=2)
    # plt.text(44, 1, r'13日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})

    # plt.scatter(51, 1, s=50, color='cyan')
    # plt.plot([51, 51], [1, 0], 'x--', lw=2)
    # plt.text(49, 1, r'21日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点12 # 画虚线6 04
    # plt.scatter(52, 1, s=50, color='cyan')
    # plt.plot([52, 52], [1, 0], 'x--', lw=2)
    # plt.text(52, 1, r'22日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点13 # 画虚线7 06
    # plt.scatter(54, 1, s=50, color='cyan')
    # plt.plot([54, 54], [1, 0], 'x--', lw=2)
    # plt.text(54, 1, r'24日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点14 # 画虚线8 11
    # plt.scatter(57, 1, s=50, color='cyan')
    # plt.plot([57, 57], [1, 0], 'x--', lw=2)
    # plt.text(57, 1, r'27日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点15 # 画虚线9 16
    # plt.scatter(66, 1, s=50, color='cyan')
    # plt.plot([66, 66], [1, 0], 'x--', lw=2)
    # plt.text(66, 1, r'7日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点15 # 画虚线9 16
    # plt.scatter(74, 1, s=50, color='cyan')
    # plt.plot([74, 74], [1, 0], 'x--', lw=2)
    # plt.text(74, 1, r'15日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})
    #
    # # 画点15 # 画虚线9 16
    # plt.scatter(75, 1, s=50, color='cyan')
    # plt.plot([75, 75], [1, 0], 'x--', lw=2)
    # plt.text(76, 1, r'16日', fontdict={'size': '15', 'color': 'black', "FontProperties": font})

    # 画点13 # 画虚线7 06
    # plt.scatter(5, 1, s=50, color='cyan')
    # plt.plot([5, 5], [295, 0], 'x--', lw=2)
    # plt.text(5, 2, r'阈值', fontdict={'size': '15', 'color': 'black', "fontproperties": font})

    ax.legend()
    plt.show()



if __name__ == '__main__':

    # 调用计算
    draw_every_indeicators()
# naturalconnectivity = [3.8054211516065135, 4.189661893412327, 5.815635509505449, 6.2575356473157315, 6.495924837711522, 6.101382569388786, 6.042802196637723, 6.54132670808149, 6.7659906497323865, 6.070756672664894, 6.255365269235537, 5.312224509519529, 5.7242177874758, 5.238420365920898, 5.284454694251656, 5.01873187728914, 4.6195159637947, 4.902559251198258, 4.581515199732916, 4.553608012837706, 4.888824492083416, 4.340743765359146, 3.958869428897951, 3.1580743584607647, 2.4532991690644463, 3.826970184151142, 3.185306653208051, 2.272478425586528, 1.9224243425377507, 1.6875987107719514, 1.4241767844375044, 1.1843099181064112, 1.3501382161677478, 1.1779588057665615, 1.0068654090954643, 0.9591263765511722, 0.9549784975292833, 0.9108907783592766, 1.0127400003165794, 0.9110228849250827, 0.962932622075445, 0.8643395539568397, 0.773339002998245, 0.7690104040745711, 0.7641323690701971, 0.7743908379173462, 0.7174330188402992, 1.0231040229077941, 1.031220841841568, 1.0728923128757877, 1.075706335933197, 1.2092959692499317, 1.3708873855994008, 1.3247716559564846, 1.6643307033737536, 1.639692475157782, 1.6427462495041156, 1.6194756989410886, 1.8101346089828874, 2.0930715739450787, 1.9816221052133336, 1.9755974856465264, 1.969227980018581, 1.976156912642961, 1.9787349160850156, 2.1256313968406912, 2.372593727281496, 2.1458544637529497, 2.5769202400259674, 2.3579150526149166, 2.2382183327732617, 2.4005282861791923, 2.624630573785448, 3.207923309536434, 2.8083979474742105, 3.147583518140432, 2.80023951794792, 2.7930670961914887, 2.856617555096874, 3.1069287198215316, 3.618273860575515, 3.329034879538445, 3.4955640852681493, 3.2142352841728874, 3.2358774714696614, 3.165957791280254, 3.2995138440682643, 3.379579195338067, 3.68127597358591, 3.7398041445963175, 3.6314436733089117, 3.3238577221119896, 2.9862818271500897, 3.3480315847451836, 3.8322700595773544, 4.463167246716932, 2.8004552389569937, 2.922353243991577, 2.6244226598473213, 2.197670242003376, 2.901925271173437, 3.4348219158618334, 3.4971064779915704, 3.895989971442967, 3.7065415181986223, 3.722149850865753, 3.7516791305090673, 3.8868387620746954, 3.759759258550909, 3.970183030794682, 4.064482664466997, 3.86997776696022, 3.791220427017696, 3.1570101401874706, 3.926812959279974, 3.964796449918724, 3.6385047405465376, 3.7800432099633796, 4.057582723926704, 3.8459571840578124, 4.040433691340066, 6.609114940168138, 5.063703957021435, 6.2383864933104896]
# for i,j in zip(naturalconnectivity,listXData):
#     print(j,i)
# yuzhi_list= [0.0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.17500000000000002, 0.18, 0.185, 0.19, 0.195, 0.2, 0.20500000000000002, 0.21, 0.215, 0.22, 0.225, 0.23, 0.23500000000000001, 0.24, 0.245, 0.25]


nodeList=['舟山', '贵阳', '黄石', '昭通', '焦作', '南通', '丽水', '晋城', '巴中', '阜新', '合肥', '威海', '宿州', '德阳', '白山', '延安', '攀枝花', '佛山', '亳州', '天门', '濮阳', '池州', '漯河', '盐城', '厦门', '丹东', '保山', '贵港', '南昌', '绵阳', '黄冈', '廊坊', '鄂州', '渭南', '宣城', '乐山', '昆明', '淮安', '云浮', '南京', '长治', '防城港', '鞍山', '泸州', '大连', '阳泉', '盘锦', '温州', '赣州', '荆门', '西宁', '湘西土家族苗族自治州', '吉安', '开封', '铜陵', '孝感', '呼和浩特', '佳木斯', '枣庄', '眉山', '遂宁', '武汉', '许昌', '达州', '青岛', '承德', '咸阳', '驻马店', '天水', '苏州', '长春', '黑河', '连云港', '红河哈尼族彝族自治州', '辽阳', '六安', '菏泽', '衡水', '营口', '兴安盟', '岳阳', '黔南布依族苗族自治州', '湘潭', '泉州', '齐齐哈尔', '平顶山', '武威', '宜昌', '滁州', '江门', '临沧', '玉溪', '郴州', '葫芦岛', '沈阳', '商丘', '潜江', '南充', '嘉兴', '东莞', '广安', '恩施土家族苗族自治州', '乌兰察布', '潍坊', '襄阳', '天津', '茂名', '大庆', '邢台', '镇江', '张掖', '河源', '东营', '绥化', '马鞍山', '台州', '抚顺', '柳州', '西双版纳傣族自治州', '西安', '白银', '蚌埠', '揭阳', '宜春', '九江', '邵阳', '阜阳', '四平', '张家口', '湛江', '铁岭', '德宏傣族景颇族自治州', '普洱', '荆州', '伊春', '济宁', '烟台', '珠海', '太原', '本溪', '惠州', '无锡', '双鸭山', '安阳', '运城', '衡阳', '广州', '玉林', '淮北', '凉山彝族自治州', '自贡', '常德', '海南藏族自治州', '长沙', '宁德', '呼伦贝尔', '百色', '新乡', '包头', '甘孜藏族自治州', '朔州', '辽源', '海西蒙古族藏族自治州', '张家界', '重庆', '庆阳', '聊城', '泰州', '上饶', '曲靖', '郑州', '中山', '安顺', '白城', '漳州', '淮南', '桂林', '南宁', '益阳', '济源', '文山壮族苗族自治州', '北海', '抚州', '阳江', '秦皇岛', '梅州', '成都', '德州', '锦州', '安康', '巴彦淖尔', '河池', '汕头', '通化', '龙岩', '梧州', '宜宾', '莆田', '济南', '安庆', '萍乡', '深圳', '日照', '赤峰', '宁波', '平凉', '邯郸', '丽江', '大同', '汕尾', '株洲', '宿迁', '怀化', '钦州', '哈尔滨', '南平', '宝鸡', '鹤岗', '榆林', '通辽', '随州', '泰安', '鹤壁', '朝阳', '资阳', '雅安', '仙桃', '信阳', '楚雄彝族自治州', '潮州', '绍兴', '周口', '常州', '吕梁', '忻州', '景德镇', '三明', '鹰潭', '杭州', '金华', '鄂尔多斯', '衢州', '牡丹江', '陇南', '铜川', '扬州', '临夏回族自治州', '阿坝藏族羌族自治州', '芜湖', '清远', '来宾', '石家庄', '定西', '福州', '黔东南苗族侗族自治州', '广元', '洛阳', '淄博', '临汾', '娄底', '鸡西', '北京', '沧州', '崇左', '海北藏族自治州', '贺州', '湖州', '三门峡', '临沂', '肇庆', '大理白族自治州', '咸宁', '徐州', '内江', '兰州', '唐山', '永州', '黔西南布依族苗族自治州', '韶关', '晋中', '遵义', '松原', '上海', '十堰', '乌海', '金昌', '商洛', '南阳', '六盘水', '汉中', '延边朝鲜族自治州', '锡林郭勒盟', '保定', '新余', '滨州']
# print(len(nodeList))


# listnew=[]
# for i in diversity_list:
#     listnew.append(i/100)
# print(listnew)
sizeoflargestcomponent_original = [262, 258, 287, 288, 289, 288, 288, 288, 288, 287, 288, 289, 288, 288, 287, 284, 283,
                                   284, 283, 284, 285, 285, 283, 258, 26, 253, 148, 138, 67, 66, 64, 36, 65, 33, 12, 12,
                                   12, 12, 12, 5, 12, 12, 13, 11, 11, 12, 15, 24, 24, 29, 32, 36, 59, 57, 71, 72, 67,
                                   70, 71, 73, 40, 37, 40, 71, 70, 71, 73, 49, 40, 72, 71, 72, 82, 100, 197, 92, 99,
                                   101, 86, 221, 256, 249, 229, 228, 257, 252, 227, 229, 257, 259, 261, 210, 91, 116,
                                   229, 226, 144, 127, 195, 62, 183, 227, 244, 250, 246, 245, 245, 244, 239, 238, 239,
                                   237, 234, 212, 238, 236, 263, 264, 267, 264, 265, 285, 283, 283]

# for i,j in zip(sizeoflargestcomponent_original,listXData):
#     print(j,i)
# # # 寻找当前日期的索引号来画点
# print(listXData.index("20200315"))

# plt.rcParams['font.sans-serif']=['SimHei'] #显示中文标签
# plt.rcParams['axes.unicode_minus']=False   #这两行需要手动设置
# data = pd.read_csv("indictors.csv",encoding="gbk")
# df = data.iloc[:, :7]  # 取前7列数据
# result5 = df.corr()
# pd.set_option('display.max_rows', 500)
# pd.set_option('display.max_columns', 100)
# pd.set_option('display.width', 1000)
# result5.to_csv("adad.csv")
#
# sns.pairplot(df)
# plt.savefig("pairplot000.png")




