# coding:utf-8
"""
@file: part_one.py
@author: wu hao
@time: 2022/11/5 21:16
@env: 封城数据处理
@desc:
@ref:
"""

import datetime

# coding=utf-8
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.ticker import FuncFormatter, MaxNLocator


# 根据路径画图

# 获取时间列表
def getdaylist(begin, end):
    """
    获取时间列表
    """
    beginDate = datetime.datetime.strptime(str(begin), "%Y%m%d")
    endDate = datetime.datetime.strptime(str(end), "%Y%m%d")
    dayList = []
    while beginDate <= endDate:
        dayList.append(datetime.datetime.strftime(beginDate, "%Y%m%d"))
        beginDate += datetime.timedelta(days=+1)
    return dayList


moveIn_file  = "F:/封城数据处理/paper_supplement_experiment/data/石家庄迁徙指数/in/130100_石家庄_move_in.csv"
moveOut_file  = "F:/封城数据处理/paper_supplement_experiment/data/石家庄迁徙指数/out/130100_石家庄_move_out.csv"

moveIn_data = pd.read_csv(moveIn_file, encoding="utf-8")  # ,encoding="utf-8"
moveOut_data = pd.read_csv(moveOut_file, encoding="utf-8")  # ,encoding="utf-8"

old_in_index =[2.6351568, 1.9098504, 2.2408164, 1.5538392, 0.5451948, 0.8262, 0.475146, 0.3556872, 0.247536, 0.2083968, 0.189378, 0.1877256, 0.194238, 0.2055456, 0.2149092, 0.2121552, 0.203958, 0.2022732, 0.2066148, 0.2169828, 0.2116044, 0.214164, 0.2237544, 0.2210652, 0.2265408, 0.2314332, 0.2528172, 0.2563164, 0.2541456, 0.2751408, 0.2119932, 0.3302208, 0.340524, 0.3762936, 0.3790152, 0.4212648, 0.4731372, 0.487944, 0.51678, 0.5646348, 0.5883516, 0.533142, 0.307962, 0.3544236, 0.4900824, 0.6691248, 0.8016084, 1.309446, 1.341684, 1.0989432, 1.1473164, 1.2056688, 1.3228596, 1.2596148, 1.2901356, 1.263924, 1.2935052, 1.74312, 1.8763164, 1.786212, 1.6682436, 1.6279056, 1.6284888, 1.7227728, 1.7642772, 1.5807312, 1.7914284, 1.6720344, 1.653696, 1.6337052, 1.8051012, 2.052864, 1.7699472, 1.9963584, 1.7523216, 1.7715672, 1.7665776, 1.9794456, 2.2669308, 1.8995472, 2.0552292, 1.8076608, 1.7464896, 1.8006624, 2.0505312, 2.384478, 2.1510036, 2.5598592, 2.3416128, 2.0710728, 2.1193812, 2.3062968, 3.543102, 2.6383644, 3.6525492, 3.8370996, 3.229308, 2.854926, 2.7574668, 2.8692468, 2.2410432, 2.281608, 2.1396636, 2.3647788, 2.3444316, 2.5520832, 3.0273264, 2.5514352, 2.662308, 2.3240844, 2.201418, 2.1747852, 2.3733972, 2.5721064, 2.2140864, 2.299914, 2.2011912, 2.2387428, 2.4218352, 3.1314276, 5.5785348, 4.5798048, 4.2681168, 3.9400992, 4.92237, 3.7539936, 2.756268, 2.613708]

old_out_index =[3.1600368, 2.1082032, 2.1058704, 1.898316, 0.8690004, 1.6824996, 0.7218396, 0.4272264, 0.1904148, 0.1316412, 0.1157004, 0.1269108, 0.1327752, 0.1415556, 0.1430136, 0.1447308, 0.1377972, 0.1352376, 0.1431108, 0.1489104, 0.1528308, 0.1686096, 0.183708, 0.2007504, 0.2055456, 0.2126088, 0.2412504, 0.2433564, 0.28107, 0.4470876, 0.3960576, 0.454248, 0.4701564, 0.487458, 0.6009876, 0.6224688, 0.6682176, 0.7217424, 0.8204652, 0.990144, 1.209006, 1.2627252, 0.6035796, 0.6906708, 0.701136, 0.7305228, 0.6706476, 0.9212292, 1.0931436, 1.0646964, 1.17612, 1.244322, 1.4598792, 1.4475348, 1.3999392, 1.396602, 1.4569956, 1.8066564, 1.6315668, 1.685448, 1.8528588, 1.725138, 1.6421292, 1.6309836, 1.8671148, 1.698894, 1.9822644, 1.8532152, 1.7396856, 1.7696556, 1.7507664, 2.2233852, 1.8745992, 2.107458, 1.9973628, 1.9819728, 1.8545436, 1.8576864, 2.1483792, 1.9983024, 2.3190948, 2.014308, 1.929258, 1.9459116, 2.008962, 2.3544756, 2.103732, 2.3876208, 2.1344472, 2.0436624, 2.0807604, 2.2690692, 4.5666504, 3.051432, 2.6485704, 3.0512376, 2.5014744, 2.31822, 2.2223484, 2.3680512, 2.1946788, 2.5253856, 2.2798584, 2.3827284, 2.252286, 2.3571324, 2.7997164, 2.3848668, 2.8058724, 2.4847884, 2.2921056, 2.2070232, 2.33199, 2.4080652, 2.2935312, 2.44296, 2.3328648, 2.394846, 2.4594192, 3.0605364, 6.856326, 5.2218432, 3.927852, 3.3343164, 4.1688756, 3.6658656, 2.8560276, 2.4871536]


new_in_index =[2.034234, 2.0580156, 2.0606724, 2.0280456, 2.0019312, 2.1051252, 2.1707028, 1.9654488, 2.0065968, 2.1777984, 2.7730836, 2.9004804, 2.1707028, 2.8950696, 2.5410672, 2.01042, 2.003616, 1.931202, 2.3399604, 1.7647308, 1.7831988, 1.9478232, 1.7887392, 1.745226, 1.7843328, 1.8371124, 1.6318908, 1.6923168, 1.5854616, 1.6152696, 1.7976816, 1.6965936, 1.5975468, 1.6216524, 1.7261748, 1.8715212, 1.9694016, 1.9148724, 1.956474, 1.930554, 1.6482528, 1.2465252, 0.8026776, 1.5707844, 2.0217276, 2.4703056, 2.9858868, 4.6448316, 3.6117252, 2.7270756, 2.6634744, 2.5707132, 2.507598, 2.3772852, 1.95291, 1.9625004, 1.8027684, 2.7655992, 2.8272888, 2.7026784, 2.7216972, 2.5628724, 2.8352268, 2.9120472, 2.8360368, 2.3999004, 2.8708344, 4.3484688, 4.1448348, 2.5782948, 2.9972592, 2.1843432, 2.3417424, 2.3677272, 2.428704, 1.924722, 1.7926596, 1.5857532, 1.5449292, 1.5112656, 1.6828236, 1.55601, 1.3799808, 1.5111684, 1.3102236, 1.2655764, 1.2132828, 1.260522, 1.1133936, 1.0536156, 1.4203188, 1.2335328, 1.1290104, 1.1468952, 1.0561104, 1.3411008, 1.1826, 1.3089924, 1.0753236, 1.3233456, 1.065636, 1.1590128, 1.2933432, 1.6291692, 1.0984572, 1.1344536, 1.2694968, 1.08621, 1.0767816, 1.0490796, 1.0752588, 1.12833, 1.07082, 1.0739304, 1.1330928, 1.3195872, 1.3527972, 1.2005172, 1.3380876, 1.3512096, 1.3282704, 1.3146624, 1.343142, 1.3307004, 1.2875112, 1.3678956, 1.386396, 1.3391568]


new_out_index =[2.4690744, 2.4260472, 2.316762, 1.9561824, 2.0247408, 2.1633804, 2.6285796, 2.4508008, 2.200932, 2.1232368, 2.5326432, 3.5226252, 2.1838248, 2.2947948, 2.7032292, 2.1508092, 1.9773072, 1.8255132, 2.0608344, 1.67994, 1.9560528, 2.0934288, 1.860246, 1.850688, 1.8496188, 1.8343584, 1.6492572, 1.8558396, 1.7513496, 1.7500536, 1.6427124, 1.5947604, 1.4763384, 1.5677388, 1.7974548, 1.9945764, 2.0785896, 2.2766184, 2.5453764, 3.1261788, 3.3387228, 2.7046872, 1.1828592, 2.205306, 1.8625788, 1.918242, 1.702782, 2.3955588, 2.3242464, 2.0843244, 2.0840328, 2.1041856, 2.1353868, 2.1666528, 1.695816, 1.9263096, 1.863486, 2.4144804, 2.341062, 2.341386, 2.5811784, 2.4950916, 2.733912, 2.4354108, 2.3003352, 2.1531744, 2.1985344, 2.5707132, 2.4067692, 2.1077172, 2.4485652, 2.005074, 2.2661532, 2.14002, 1.9867032, 1.7559504, 2.0100636, 1.77066, 1.6587828, 1.5706548, 1.6363944, 1.5765192, 1.4180184, 1.658718, 1.4185368, 1.3344264, 1.2568932, 1.2607488, 1.1893068, 1.086696, 1.5675444, 1.322568, 1.2223224, 1.2092328, 1.1026368, 1.3272012, 1.18503, 1.448118, 1.2547224, 1.3967316, 1.1217204, 1.1726532, 1.1495196, 1.5556212, 1.101114, 1.1300472, 1.5258132, 1.256472, 1.1217204, 1.0418544, 1.2083904, 1.2629844, 1.1311812, 1.1687976, 1.1663676, 1.2253356, 1.2771756, 1.2557268, 1.5865956, 1.407456, 1.3472568, 1.2950928, 1.2726396, 1.2505752, 1.3208508, 1.3829292, 1.3343292, 1.3613508]




def find_index_data(begintime,endtime,filePath):
    """
    找迁徙指数时间数据的

    :return:
    """

    listXData = getdaylist(begintime,endtime)

    moveIn_data = pd.read_csv(filePath, encoding="utf-8")  # ,encoding="utf-8"

    list_ =[]
    for data_need in listXData:
        for row_in in moveIn_data.iterrows():
            # 取到某一天的所有城市名称
            date_in = row_in[1]['date']
            # print(migrationProportionCity)
            # 取到某一天的此城市的迁徙比例
            index_in = row_in[1]['index']
            if data_need == str(int(date_in)):
                list_.append(index_in)

    print(list_)

def draw_every_indeicators(beginData,endData,first_data,second_data,third_data,four_data):
    """
    画 流入流出迁徙指数图
    :param beginData:
    :param endData:
    :param first_data:
    :param second_data:
    :param third_data:
    :param four_data:
    :return:
    """
    listXData = getdaylist(beginData,endData)
    # 画图 设置X轴显示效果
    # 为了设置x轴时间的显示
    def format_fn(tick_val, tick_pos):
        if int(tick_val) in range(len(listXData)):
            return str(listXData[int(tick_val)])[4:8]
        else:
            return ''

    plt.rcParams['font.sans-serif'] = ['SimHei']


    fig = plt.figure(figsize=( 12, 4))
    # fig = plt.figure(figsize=( 6, 4))

    # plt.rcParams['figure.figsize'] = (8, 16)
    plt.rcParams['savefig.dpi'] = 1200  # 图片像素
    plt.rcParams['figure.dpi'] = 450
    #


    ax1 = fig.add_subplot(121)
    ax1.xaxis.set_major_formatter(FuncFormatter(format_fn))
    ax1.xaxis.set_major_locator(MaxNLocator(integer=True))
    # 坐标轴ticks的字体大小
    ax1.set_xlabel('日期', fontsize=12)  # 为x轴添加标签
    ax1.set_ylabel('百度迁徙指数', fontsize=12)  # 为y轴添加标签  数值

    # plt.plot(listXData, first_data, "4-", linewidth=2, label='人口流入')
    # plt.plot(listXData, third_data, "1--", linewidth=2, label='人口流出')

    plt.plot(listXData, first_data, "4-", linewidth=2, label='2021年节假日人口流出量')
    plt.plot(listXData, second_data, "1--", linewidth=2, label='2022年节假日人口流出量')

    # plt.scatter(6, 5, s=50, color='cyan')
    # plt.plot([6, 6], [5, 0], 'x--', lw=1.5)
    # plt.text(0, 5, r'封城开始', fontdict={'size': '12', 'color': 'black'})
    #
    # plt.scatter(28, 5, s=50, color='cyan')
    # plt.plot([28, 28], [5, 0], 'x--', lw=1.5)
    # plt.text(27, 5, r'封城结束', fontdict={'size': '12', 'color': 'black'})

    plt.scatter(92, 5, s=50, color='cyan')
    plt.plot([92, 92], [5, 0], 'x--', lw=1.5)
    plt.text(91, 5, r'清明节', fontdict={'size': '12', 'color': 'black'})

    plt.scatter(120, 6.5, s=50, color='cyan')
    plt.plot([120, 120], [6.5, 0], 'x--', lw=1.5)
    plt.text(119, 6.5, r'劳动节', fontdict={'size': '12', 'color': 'black'})

    ax1.legend()


    ax2 = fig.add_subplot(122)
    ax2.xaxis.set_major_formatter(FuncFormatter(format_fn))
    ax2.xaxis.set_major_locator(MaxNLocator(integer=True))
    ax2.set_xlabel('日期', fontsize=14)  # 为x轴添加标签
    ax2.set_ylabel('百度迁徙指数', fontsize=14)  # 为y轴添加标签  数值
    plt.plot(listXData, third_data, "4-", linewidth=2, label='2021年节假日人口流出量')
    plt.plot(listXData, four_data, "1--", linewidth=2, label='2022年节假日人口流出量')

    # plt.scatter(6, 5, s=50, color='cyan')
    # plt.plot([6, 6], [5, 0], 'x--', lw=1.5)
    # plt.text(0, 5, r'封城开始', fontdict={'size': '14', 'color': 'black'})
    # plt.scatter(28, 5, s=50, color='cyan')
    # plt.plot([28, 28], [5, 0], 'x--', lw=1.5)
    # plt.text(27, 5, r'封城结束', fontdict={'size': '14', 'color': 'black'})

    plt.scatter(92, 5, s=50, color='cyan')
    plt.plot([92, 92], [5, 0], 'x--', lw=1.5)
    plt.text(91, 5, r'清明节', fontdict={'size': '12', 'color': 'black'})

    plt.scatter(120, 6.5, s=50, color='cyan')
    plt.plot([120, 120], [6.5, 0], 'x--', lw=1.5)
    plt.text(119, 6.5, r'劳动节', fontdict={'size': '12', 'color': 'black'})


    ax2.legend()


    plt.show()

if __name__ == '__main__':
    # draw_every_indeicators(20220101,20220508,old_in_index,new_in_index,old_out_index,new_out_index)


    # filepath_="F:/百度迁徙数据_日常维护/迁徙指数_需补充/in/610100_西安_move_in.csv"
    filepath_="F:/百度迁徙数据_日常维护/迁徙指数_最终版/in/130100_石家庄_move_in.csv"
    find_index_data(20220107,20220129,filepath_)

    # 石家庄封城流入
    sjz_lock_in = [0.475146, 0.3556872, 0.247536, 0.2083968, 0.189378, 0.1877256, 0.194238, 0.2055456, 0.2149092, 0.2121552, 0.203958, 0.2022732, 0.2066148, 0.2066148, 0.2066148, 0.2066148, 0.2169828, 0.2169828, 0.2169828, 0.2169828, 0.2116044, 0.2116044, 0.2116044, 0.2116044, 0.214164, 0.214164, 0.214164, 0.214164, 0.2237544, 0.2237544, 0.2237544, 0.2237544, 0.2210652, 0.2210652, 0.2210652, 0.2210652, 0.2265408, 0.2265408, 0.2265408, 0.2265408, 0.2314332, 0.2314332, 0.2314332, 0.2314332, 0.2528172, 0.2528172, 0.2528172, 0.2528172, 0.2563164, 0.2563164, 0.2563164, 0.2563164, 0.2541456, 0.2541456, 0.2541456, 0.2541456]

    sjz_lock_out = [0.7218396, 0.4272264, 0.1904148, 0.1316412, 0.1157004, 0.1269108, 0.1327752, 0.1415556, 0.1430136, 0.1447308, 0.1377972, 0.1352376, 0.1431108, 0.1489104, 0.1528308, 0.1686096, 0.183708, 0.2007504, 0.2055456, 0.2126088, 0.2412504, 0.2433564, 0.28107]
    # 石家庄对比年份 未封城 流入
    sjz_Unlock_in =[1.931202, 1.931202, 1.931202, 1.931202, 2.3399604, 2.3399604, 2.3399604, 2.3399604, 1.7647308, 1.7647308, 1.7647308, 1.7647308, 1.7831988, 1.7831988, 1.7831988, 1.7831988, 1.9478232, 1.9478232, 1.9478232, 1.9478232, 1.7887392, 1.7887392, 1.7887392, 1.7887392, 1.745226, 1.745226, 1.745226, 1.745226, 1.7843328, 1.7843328, 1.7843328, 1.7843328, 1.8371124, 1.8371124, 1.8371124, 1.8371124, 1.6318908, 1.6318908, 1.6318908, 1.6318908, 1.6923168, 1.6923168, 1.6923168, 1.6923168, 1.5854616, 1.5854616, 1.5854616, 1.5854616, 1.6152696, 1.6152696, 1.6152696, 1.6152696, 1.7976816, 1.7976816, 1.7976816, 1.7976816, 1.6965936, 1.6965936, 1.6965936, 1.6965936, 1.5975468, 1.5975468, 1.5975468, 1.5975468, 1.6216524, 1.6216524, 1.6216524, 1.6216524, 1.7261748, 1.7261748, 1.7261748, 1.7261748, 1.8715212, 1.8715212, 1.8715212, 1.8715212, 1.9694016, 1.9694016, 1.9694016, 1.9694016, 1.9148724, 1.9148724, 1.9148724, 1.9148724, 1.956474, 1.956474, 1.956474, 1.956474, 1.930554, 1.930554, 1.930554, 1.930554]

    sjz_Unlock_out = [1.8255132, 2.0608344, 1.67994, 1.9560528, 2.0934288, 1.860246, 1.850688, 1.8496188, 1.8343584, 1.6492572, 1.8558396, 1.7513496, 1.7500536, 1.6427124, 1.5947604, 1.4763384, 1.5677388, 1.7974548, 1.9945764, 2.0785896, 2.2766184, 2.5453764, 3.1261788]






    #总和 6.9216444
    xian_lock_in =[0.7486992, 0.3927852, 0.270054, 0.2766636, 0.2452356, 0.2015928, 0.1837404, 0.211734, 0.2391444, 0.2280312, 0.2437776, 0.216918, 0.208494, 0.1961496, 0.1973808, 0.188892, 0.2298456, 0.1827036, 0.2156868, 0.3020976, 0.319788, 0.3948264, 0.4838292, 0.5435748]
    #总和  6.579630000000001
    xian_lock_out =[1.2152268, 0.418284, 0.2645136, 0.2643192, 0.230526, 0.2686932, 0.2016252, 0.2372328, 0.2526876, 0.2006532, 0.1875636, 0.190188, 0.1781352, 0.1848744, 0.1831248, 0.1995516, 0.1828332, 0.1685772, 0.1858788, 0.2129652, 0.2031804, 0.2412504, 0.3059208, 0.4018248]
    # 总和 118.8476388
    xian_Unlock_in=[2.7426276, 2.6761428, 2.7955368, 3.4824168, 3.4356636, 3.5161452, 3.818988, 4.41936, 5.0779224, 4.7530152, 6.4505808, 6.3319644, 5.0399172, 4.7913444, 5.4438804, 5.71941, 5.7091392, 6.3370512, 5.9302692, 5.8271724, 6.2312004, 6.5234808, 5.7000996, 6.0943104]

    # 总和  140.675454
    xian_Unlock_out=[3.2440824, 3.5188344, 3.2291784, 4.1859504, 4.445442, 4.3342452, 4.5539496, 5.3018388, 8.1372924, 6.50997, 5.6152116, 6.0791148, 5.585112, 5.5701756, 6.0637896, 7.3687644, 6.7213152, 7.0042644, 6.8731092, 7.1024364, 7.0950816, 7.2664452, 7.6420584, 7.227792]






    #人口流动量下降百分比
    bb = 0
    for i in xian_Unlock_out:
        bb = bb + i

    cc=0
    for j in xian_lock_out:
        cc = cc + j

    print((bb-cc)/bb)




    # listXData = getdaylist(20210101, 20210508)
    # j=0
    # for i in listXData:
    #     print(i,j)
    #     j+=1


















