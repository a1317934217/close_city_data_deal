# coding:utf-8
"""
@file: caculate_down_propotion.py
@author: wu hao
@time: 2023/4/23 15:15
@env: 封城数据处理
@desc:
@ref:
"""

import matplotlib
import pandas as pd
import csv
import datetime
import networkx as nx
import numpy as np
import pandas as pd
# coding=utf-8
from matplotlib import pyplot as plt
from matplotlib.font_manager import FontProperties
from matplotlib.ticker import FuncFormatter, MaxNLocator
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties
from matplotlib.ticker import FuncFormatter, MaxNLocator
# 根据路径画图
from numpy import array
from sklearn.preprocessing import MinMaxScaler
# 日期时间递增 格式yyyymmdd
def getdaylist(beginDate,endDate):
    beginDate = datetime.datetime.strptime(str(beginDate), "%Y%m%d")
    endDate = datetime.datetime.strptime(str(endDate), "%Y%m%d")
    dayList = []
    while beginDate <= endDate:
        dayList.append(datetime.datetime.strftime(beginDate, "%Y%m%d"))
        beginDate += datetime.timedelta(days=+1)
    return dayList

#
# #石家庄最新的数据和比例
first_average_new =  [3.3333333333333335, 3.0256410256410255, 3.0256410256410255, 3.1666666666666665, 3.6923076923076925, 3.3333333333333335, 3.8076923076923075, 3.5384615384615383, 3.371794871794872, 3.371794871794872, 3.371794871794872, 3.6923076923076925, 3.371794871794872, 3.6923076923076925, 3.5384615384615383, 3.371794871794872, 3.5384615384615383, 3.8461538461538463, 4.076923076923077, 4.051282051282051, 4.153846153846154, 3.6923076923076925, 3.8076923076923075, 3.8333333333333335, 3.6923076923076925, 3.8333333333333335, 3.371794871794872, 4.730769230769231, 3.9358974358974357, 4.230769230769231, 5.333333333333333, 6.897435897435898, 4.0256410256410255, 4.602564102564102, 3.6794871794871793, 1.2179487179487178, 3.230769230769231, 2.371794871794872, 2.2051282051282053, 1.5, 1.4102564102564104, 1.4102564102564104, 1.3974358974358974, 1.3974358974358974, 1.2564102564102564, 1.2692307692307692, 1.2692307692307692, 1.2564102564102564, 1.2564102564102564, 1.358974358974359, 1.358974358974359, 1.358974358974359, 1.3717948717948718, 1.4102564102564104, 1.3717948717948718, 1.4102564102564104, 1.4871794871794872, 1.5, 1.3974358974358974, 1.7307692307692308, 1.8846153846153846, 1.858974358974359, 1.8846153846153846, 1.8846153846153846, 1.9743589743589745, 2.217948717948718, 2.3076923076923075, 2.5, 2.5, 2.58974358974359, 2.8076923076923075, 2.923076923076923, 2.9743589743589745, 2.128205128205128, 2.217948717948718, 2.2435897435897436, 2.3333333333333335, 2.6794871794871793, 4.397435897435898, 4.448717948717949, 4.0256410256410255, 4.423076923076923, 4.294871794871795, 3.8974358974358974, 3.4358974358974357, 3.051282051282051, 3.2435897435897436, 2.7564102564102564, 4.1923076923076925, 4.371794871794871, 4.205128205128205, 4.5, 4.358974358974359, 3.8974358974358974, 3.5128205128205128, 4.064102564102564, 3.2435897435897436, 4.217948717948718, 3.641025641025641, 3.641025641025641, 3.6666666666666665, 3.8333333333333335, 4.653846153846154, 4.102564102564102, 4.269230769230769, 4.051282051282051, 4.269230769230769, 4.012820512820513, 4.448717948717949, 4.858974358974359, 4.089743589743589, 4.512820512820513, 3.6923076923076925, 3.8333333333333335, 3.91025641025641, 4.384615384615385, 5.064102564102564, 4.256410256410256, 5.0, 4.487179487179487, 4.653846153846154, 4.487179487179487, 4.923076923076923, 7.064102564102564, 5.333333333333333, 5.794871794871795, 7.064102564102564, 5.858974358974359, 5.205128205128205, 5.0256410256410255, 4.833333333333333, 4.564102564102564, 4.564102564102564, 4.423076923076923, 4.564102564102564, 4.564102564102564, 4.730769230769231, 5.0, 4.833333333333333, 5.0, 4.653846153846154, 4.397435897435898, 4.397435897435898, 4.564102564102564, 4.743589743589744, 4.397435897435898, 4.564102564102564, 4.397435897435898, 4.564102564102564, 4.743589743589744, 6.3076923076923075, 9.487179487179487, 8.307692307692308, 7.397435897435898, 7.076923076923077, 8.256410256410257, 6.705128205128205, 5.538461538461538, 5.089743589743589]
first_degree_new =   [8, 6, 6, 7, 10, 8, 10, 10, 9, 9, 9, 9, 9, 9, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 11, 11, 9, 10, 9, 6, 10, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 4, 4, 4, 4, 6, 7, 6, 6, 7, 7, 8, 7, 7, 7, 6, 8, 7, 8, 9, 9, 8, 7, 8, 7, 9, 9, 9, 9, 9, 9, 8, 9, 10, 9, 9, 10, 10, 9, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 11, 10, 10, 12, 12, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 9, 10, 9, 10, 10, 10, 12, 12, 11, 11, 12, 12, 11, 10]
first_edge_number_new =   [33, 31, 31, 32, 36, 33, 37, 35, 34, 34, 34, 36, 34, 36, 35, 34, 35, 37, 39, 39, 39, 36, 37, 37, 36, 37, 34, 43, 38, 40, 47, 56, 39, 43, 37, 16, 34, 26, 24, 20, 19, 19, 18, 18, 16, 17, 17, 16, 16, 17, 17, 17, 18, 19, 18, 19, 19, 20, 18, 19, 22, 20, 22, 22, 23, 24, 25, 27, 27, 28, 30, 31, 31, 21, 22, 24, 25, 29, 41, 41, 38, 41, 40, 38, 35, 32, 33, 29, 40, 41, 40, 42, 41, 38, 35, 39, 33, 40, 36, 36, 36, 37, 43, 39, 41, 39, 40, 39, 42, 44, 38, 42, 36, 37, 38, 41, 46, 41, 45, 42, 43, 42, 45, 57, 48, 50, 57, 50, 46, 44, 44, 42, 42, 41, 42, 42, 43, 45, 44, 45, 43, 41, 41, 42, 43, 41, 42, 41, 42, 44, 53, 68, 63, 58, 57, 63, 55, 48, 46]
first_nature_connecty_new=   [3.599553692182638, 3.343678529933676, 3.343678529933676, 3.5235716278994973, 4.1147162259765295, 3.656067434049463, 4.250073008736565, 3.980377297952873, 3.8999143707462003, 3.8999143707462003, 3.8999143707462003, 4.094878069484233, 3.8999143707462003, 4.101150307459162, 3.980377297952873, 3.8999143707462003, 3.980377297952873, 4.207446636736144, 4.519220532710424, 4.554014909745228, 4.509682664308472, 4.1147162259765295, 4.416566765331074, 4.286799617479287, 4.1147162259765295, 4.286799617479287, 3.9926082282412434, 5.038704914076612, 4.558069468818155, 4.800031047232923, 5.542204548360937, 6.661102524600364, 4.5615535827043505, 5.037446752398199, 4.27202140814297, 1.4769309499426964, 3.9692993070229465, 2.651018203897918, 2.503716674956266, 2.199496018293237, 1.9380721699734056, 1.9380721699734056, 1.7732923133513585, 1.7732923133513585, 1.421345448357675, 1.6220128960694946, 1.6220128960694946, 1.4379974155727993, 1.4379974155727993, 1.522727350569855, 1.522727350569855, 1.522727350569855, 1.7005580008125312, 1.9380721699734056, 1.7005580008125312, 1.9380721699734056, 2.0362768621969187, 2.199496018293237, 1.7732923133513585, 1.652477372222564, 2.067873207960008, 1.6740530781563918, 2.067873207960008, 2.067873207960008, 2.3099787159199585, 2.3433753676354034, 2.473449464863316, 2.8104657658730368, 2.8104657658730368, 2.9761886469415892, 3.237498077576539, 3.418984512236746, 3.3095992001555357, 1.7212020406206012, 1.8146972642209869, 2.189518808582732, 2.4200743972739405, 3.122162884598142, 4.546314911960178, 4.507377026798138, 4.124543559253397, 4.6762656537964284, 4.510202143072284, 4.35491791688243, 4.032162958601476, 3.6767866755760013, 3.6612933271704318, 3.1091763995499697, 4.58645162618385, 4.713139981794433, 4.667919095455087, 4.974872319665162, 4.81128364521446, 4.35491791688243, 3.8735614399459, 4.458406693684608, 3.6612933271704318, 4.606435134866319, 4.169692984653891, 4.169692984653891, 4.200565862571551, 4.2617257372871205, 5.0806758893646355, 4.539960726128675, 4.853634988148021, 4.513981840462199, 4.627556989116274, 4.613893673113567, 4.9138996386011415, 5.140210645350724, 4.2917535736957495, 4.875224270513508, 4.1147162259765295, 4.267723020527084, 4.348945310982965, 4.678263516029532, 5.539725791579511, 4.862923554392818, 5.308075450250924, 5.0078461485693335, 5.083169075158174, 4.995893955169792, 5.310147314584767, 6.737730739740445, 5.619806335170943, 5.82500594013157, 6.8525731026895835, 5.963191125520368, 5.454118172075861, 5.10965724907606, 5.160931054924748, 4.925954813345564, 4.925954813345564, 4.780058323595018, 4.925954813345564, 4.925954813345564, 5.038704914076612, 5.279189161594368, 5.160931054924748, 5.279189161594368, 5.083169075158174, 4.8319543150942, 4.8319543150942, 4.925954813345564, 5.001205179079587, 4.8319543150942, 4.925954813345564, 4.8319543150942, 4.925954813345564, 5.243102892728713, 6.34415082301047, 8.093689858945302, 7.4750188937308755, 6.794307052402778, 6.735059021212468, 7.49636203930821, 6.535515468572503, 5.668167512697606, 5.4431357526329665]

# #衡量下降
# num_old = 0
# for s in first_nature_connecty_new[15:38]:
#     num_old = num_old + s
# print(num_old)
#
# num_new = 0
# for t in first_nature_connecty_new[37:60]:
#     num_new = num_new + t
# print(num_new)
#
# print((num_old-num_new)/num_old)

# 平均点下降62%  89.5 和 33.8
# 度下降96%    218 和8
# 边数目下降50% 859 和427
# 平均最短路径 下降 58%  99.5和41.8



# #西安最新数据和比例
first_average_new_xian =     [4.383333333333334, 4.383333333333334, 3.75, 4.383333333333334, 4.383333333333334, 4.383333333333334, 4.291666666666667, 4.366666666666666, 4.383333333333334, 4.291666666666667, 4.291666666666667, 4.458333333333333, 4.608333333333333, 4.458333333333333, 4.508333333333334, 4.041666666666667, 4.25, 4.383333333333334, 3.6416666666666666, 3.6416666666666666, 3.2916666666666665, 3.45, 2.6666666666666665, 1.8416666666666666, 0.9916666666666667, 1.25, 1.7666666666666666, 1.5583333333333333, 1.025, 1.8583333333333334, 1.6083333333333334, 1.275, 1.275, 1.275, 1.5916666666666666, 1.275, 1.275, 1.1916666666666667, 1.3583333333333334, 0.6833333333333333, 1.2, 1.9833333333333334, 2.683333333333333, 2.7583333333333333, 3.475, 3.25, 2.808333333333333, 2.8583333333333334, 2.95, 3.0833333333333335, 3.341666666666667, 3.191666666666667, 3.875, 3.183333333333333, 3.3916666666666666, 4.158333333333333, 4.15, 4.366666666666666, 4.458333333333333, 4.916666666666667, 5.116666666666666, 4.141666666666667, 3.158333333333333, 3.6, 3.7583333333333333, 4.208333333333333, 4.891666666666667, 5.65, 4.816666666666666, 4.308333333333334, 5.033333333333333, 5.333333333333333, 4.558333333333334, 4.5, 4.283333333333333, 4.5, 4.291666666666667]

first_degree_new_xian =   [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13, 13, 7, 5, 3, 3, 3, 4, 4, 5, 6, 4, 3, 4, 3, 3, 3, 3, 3, 2, 3, 6, 5, 8, 8, 8, 8, 11, 12, 12, 12, 12, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]

first_edge_number_new_xian =     [47, 47, 45, 47, 47, 47, 46, 47, 47, 46, 46, 48, 50, 48, 48, 45, 46, 47, 43, 43, 38, 38, 30, 22, 18, 19, 20, 19, 18, 21, 21, 18, 18, 18, 19, 18, 18, 17, 18, 14, 18, 25, 34, 34, 42, 40, 34, 35, 36, 37, 40, 40, 44, 41, 41, 48, 48, 51, 52, 56, 57, 47, 39, 43, 47, 48, 56, 61, 56, 53, 58, 59, 53, 51, 48, 49, 46]

first_nature_connecty_new_xian =     [4.157442343346333, 4.157442343346333, 4.077749946856882, 4.157442343346333, 4.157442343346333, 4.157442343346333, 4.058411473965921, 4.1653415190252785, 4.157442343346333, 4.058411473965921, 4.058411473965921, 4.267019572661694, 4.497065501093919, 4.267019572661688, 4.245889406561296, 3.995089440383321, 4.050008765734779, 4.157442343346333, 3.8043099718788227, 3.837371390097205, 3.171229078043564, 3.147872994606633, 2.0862540638219067, 1.4191566231004027, 1.161969601642289, 1.1939565758089041, 1.1793781463522264, 1.1690174276911527, 1.106141977027919, 1.2237499229848985, 1.3474863188407469, 1.1092536580795898, 1.1065046037405073, 1.1092536580795898, 1.1370838421510927, 1.1065046037405097, 1.1065046037405097, 1.0103278477679474, 1.0596716236770538, 0.8333761616425485, 1.0893546507641916, 1.836611644239371, 3.2703514294324836, 3.0457886447023776, 4.411841060866533, 4.015721265161009, 2.8372242312765596, 2.9090105760763407, 3.121400663583938, 3.2569295455822287, 3.5425961781585205, 3.523137545860285, 3.955181689639753, 3.725110555903072, 3.7186532553940173, 4.335976864490292, 4.355912873125524, 4.710862638303519, 4.880024296786805, 5.232560645183022, 5.432626197189486, 4.257153166852766, 3.578936399774938, 4.502226505106711, 4.8299732538028755, 4.692523595239993, 5.422425079469054, 5.860836822559008, 5.38173059358937, 5.028869349236968, 5.517913118375082, 5.577914545993363, 4.920872962992009, 4.62254164300085, 4.369522802606631, 4.380052580617628, 4.058411473965924]

# #衡量下降
# # num_old = 0
# # for s in first_average_new_xian[0:23]:
# #     num_old = num_old + s
# # print(num_old)
# #
# # num_new = 0
# # for t in first_average_new_xian[23:46]:
# #     num_new = num_new + t
# # print(num_new)
# #
# # print((num_old-num_new)/num_old)
#
# #平均点下降 59%  94.6 和 38.4
# # 度下降 70%    333 和 99
# # 边数目下降 51% 1036 和 509
# # 平均最短路径 下降 59%  90 和 37





def function_encapsulation(first_data,second_data,third_data,fourth_data,listXData):


    def format_fn(tick_val, tick_pos):
        if int(tick_val) in range(len(listXData)):
            return str(listXData[int(tick_val)])
        else:
            return ''

    fig = plt.figure(figsize=(8, 6))  # ,dpi=450
    ax1 = fig.add_subplot(111)
    ax1.xaxis.set_major_formatter(FuncFormatter(format_fn))
    ax1.xaxis.set_major_locator(MaxNLocator(integer=True))
    # plt.ylim((-5, 40))
    # 横坐标每个值旋转90度
    plt.xticks(rotation=45)

    # 坐标轴ticks的字体大小
    ax1.set_xlabel('日期', fontsize=12)  # 为x轴添加标签
    ax1.set_ylabel('数值', fontsize=12)  # 为y轴添加标签  数值
    ax1.legend()
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams["axes.unicode_minus"] = False

    # 根据需要设置最大最小值，这里设置最大值为1.最小值为0
    # 数据归一化
    tool = MinMaxScaler(feature_range=(0, 1))
    # first_data = tool.fit_transform(array(first_data).reshape(-1,1)).tolist()


    plt.title("西安经济下降百分比",fontsize=12)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)


    plt.plot(listXData, first_data,  linewidth=2,  label="平均点连通性") #"4-",
    plt.plot(listXData, second_data, linewidth=2, label='城市度')  # , "1--"
    plt.plot(listXData, third_data, linewidth=2, label='边数量')  # , ".-"
    plt.plot(listXData, fourth_data, linewidth=2, label='平均最短路径长度')  # , ".-"

    # plt.scatter(6, 1, s=50, color='cyan')
    # plt.plot([6, 6], [1, 0], 'x--', lw=1.5)
    # plt.text(0, 0.90, r'封城开始', fontdict={'size': '12', 'color': 'black'})
    #
    # plt.scatter(28, 1, s=50, color='cyan')
    # plt.plot([28, 28], [1, 0], 'x--', lw=1.5)
    # plt.text(27, 0.90, r'封城结束', fontdict={'size': '12', 'color': 'black'})
    # plt.legend(fontsize=12,loc="lower right")#fontsize=12

    # plt.scatter(92, 1, s=50, color='cyan')
    # plt.plot([92, 92], [1, 0], 'x--', lw=1.5)
    # plt.text(91, 0.9, r'清明节', fontdict={'size': '12', 'color': 'black'})
    #
    # plt.scatter(120, 1, s=50, color='cyan')
    # plt.plot([120, 120], [1, 0], 'x--', lw=1.5)
    # plt.text(119, 0.9, r'劳动节', fontdict={'size': '12', 'color': 'black'})

    plt.show()






def caculate_down_propotion(first_number,second_number):
    """
    计算时间顺序的下降比例
    :param first_number:  必须是列表参数的形式
    :param second_number: 必须是列表参数的形式
    :return:
    """
    # 衡量下降
    #最终储存的比例列表


    num_old = 0
    for s in first_number:
        num_old = num_old + s
    # print(num_old)

    num_new = 0
    for t in second_number:
        num_new = num_new + t
    # print(num_new)


    result = (num_old - num_new) / num_old

    return round(result, 4)


def down_propotion_slice():
    list_index_name_xian = [first_average_new_xian, first_degree_new_xian, first_edge_number_new_xian,
                            first_nature_connecty_new_xian]
    list_index_name_SJZ = [first_average_new, first_degree_new, first_edge_number_new, first_nature_connecty_new]

    for index_name in list_index_name_SJZ:
        list_propotion = []
        for i, j in zip(range(0, 58), range(23, 77)):
            first_list = index_name[i:j]
            second_list = index_name[i + 1:j + 1]
            list_propotion.append(caculate_down_propotion(first_list, second_list))
        print(list_propotion)


if __name__ == '__main__':



    first_average_new_xian_propotion = [0.0187, 0.0281, 0.0314, 0.0369, 0.032, 0.0356, 0.0427, 0.0343, 0.0393, 0.0444, 0.0465, 0.0515, 0.0514, 0.0572, 0.0616, 0.0579, 0.0623, 0.0851, 0.0614, 0.0444, 0.017, 0.0197, -0.0235, -0.04, -0.0496, -0.0419, -0.0296, -0.037, -0.0542, -0.0296, -0.0489, -0.0392, -0.0419, -0.0547, -0.046, -0.0532, -0.052, -0.0578, -0.0552, -0.0481, -0.026, -0.0209, -0.0136, -0.0181, -0.0174, -0.029, -0.0236, -0.0166, -0.0235, -0.0248, -0.0131, -0.0139, -0.0043, -0.0137, -0.0092]

    first_degree_new_xian_propotion =[0.0245, 0.0314, 0.039, 0.0405, 0.0423, 0.0404, 0.0421, 0.04, 0.0375, 0.0476, 0.0545, 0.0529, 0.0609, 0.0649, 0.0694, 0.0745, 0.0805, 0.0949, 0.0968, 0.0804, 0.0777, 0.0526, -0.0111, -0.033, -0.0532, -0.0808, -0.0841, -0.069, -0.0645, -0.053, -0.0576, -0.0748, -0.0759, -0.0647, -0.0663, -0.0622, -0.0585, -0.0553, -0.0524, -0.0539, -0.0433, -0.0264, -0.0331, -0.0214, -0.0244, -0.0238, -0.0233, -0.013, -0.0096, -0.0095, -0.0094, -0.0093, -0.0031, 0.0, 0.0]

    first_edge_number_new_xian_propotion = [0.0169, 0.0253, 0.028, 0.0299, 0.0297, 0.0317, 0.0328, 0.0315, 0.0325, 0.0362, 0.0375, 0.0418, 0.0451, 0.0457, 0.0478, 0.0469, 0.0492, 0.061, 0.0492, 0.0373, 0.0086, 0.0087, -0.0263, -0.0384, -0.0329, -0.0318, -0.0308, -0.0336, -0.0398, -0.033, -0.0387, -0.0373, -0.0359, -0.0452, -0.0418, -0.0457, -0.045, -0.0494, -0.0471, -0.0381, -0.0233, -0.0195, -0.0138, -0.0147, -0.0145, -0.0214, -0.022, -0.0176, -0.0211, -0.0207, -0.012, -0.01, -0.0036, -0.0072, -0.0045]

    first_nature_connecty_new_xian_propotion = [0.0233, 0.0316, 0.0347, 0.0366, 0.0381, 0.0398, 0.0409, 0.0425, 0.0424, 0.0465, 0.0488, 0.0549, 0.0618, 0.0619, 0.0656, 0.0667, 0.0716, 0.0858, 0.0766, 0.0612, -0.0032, 0.0033, -0.0757, -0.0786, -0.047, -0.046, -0.0498, -0.051, -0.0566, -0.0506, -0.0546, -0.0519, -0.0493, -0.058, -0.0547, -0.0581, -0.0575, -0.0608, -0.0594, -0.0439, -0.0306, -0.0318, -0.018, -0.0187, -0.0113, -0.0203, -0.0275, -0.0223, -0.0246, -0.0233, -0.0135, -0.0106, -0.004, -0.0062, -0.0032]



    first_average_new_propotion = [-0.0061, -0.0081, -0.0097, -0.0024, -0.0124, -0.0071, -0.0049, -0.0208, -0.0401, -0.0072, -0.0134, 0.0001, 0.0231, 0.0051, 0.0129, 0.013, 0.0231, 0.0282, 0.0318, 0.0327, 0.0351, 0.0321, 0.0346, 0.0362, 0.0357, 0.0391, 0.0318, 0.0551, 0.0445, 0.0517, 0.0748, 0.1139, 0.0608, 0.0772, 0.0585, -0.0051, 0.0425, 0.0144, 0.0104, -0.0117, -0.0142, -0.0167, -0.0239, -0.0259, -0.0345, -0.033, -0.0343, -0.0389, -0.0402, -0.0375, -0.0172, -0.0189, -0.0188, -0.0196]

    first_degree_new_propotion = [-0.0096, -0.019, -0.0187, -0.0092, 0.0, -0.0091, 0.0, -0.0045, -0.009, 0.0, -0.0044, 0.0, 0.0133, -0.0045, 0.0268, 0.0321, 0.0474, 0.0498, 0.0524, 0.0552, 0.0585, 0.0621, 0.0662, 0.0709, 0.0763, 0.0826, 0.0811, 0.098, 0.1087, 0.122, 0.1528, 0.1803, 0.18, 0.2439, 0.2903, 0.2727, 0.5, 0.125, -0.1429, -0.375, -0.2727, -0.2143, -0.2353, -0.1905, -0.2, -0.1667, -0.1429, -0.15, -0.1304, -0.1346, -0.0678, -0.0635, -0.0597, -0.0563]

    first_edge_number_new_propotion = [-0.005, -0.0062, -0.0074, -0.0024, -0.0085, -0.006, -0.0036, -0.0143, -0.0259, -0.0057, -0.0103, -0.0011, 0.0203, 0.0023, 0.0104, 0.0116, 0.0177, 0.0216, 0.0245, 0.0264, 0.0271, 0.0265, 0.0272, 0.028, 0.0288, 0.0312, 0.026, 0.0409, 0.0344, 0.0374, 0.0494, 0.0705, 0.0399, 0.0499, 0.0372, -0.0045, 0.0339, 0.0094, 0.0095, -0.0048, -0.0071, -0.0094, -0.014, -0.0161, -0.0249, -0.0221, -0.0238, -0.0296, -0.0308, -0.0279, -0.0078, -0.0096, -0.0114, -0.0113]

    first_nature_connecty_new_propotion = [-0.0075, -0.0083, -0.0101, -0.005, -0.0098, -0.0094, -0.0057, -0.0161, -0.028, -0.0065, -0.0112, -0.0017, 0.0234, 0.0013, 0.0132, 0.014, 0.0182, 0.0236, 0.0275, 0.0304, 0.0309, 0.0314, 0.0336, 0.0331, 0.0344, 0.0379, 0.0342, 0.0504, 0.0458, 0.049, 0.06, 0.0878, 0.0509, 0.0613, 0.0451, -0.0068, 0.0525, 0.0139, 0.0201, 0.0033, -0.0032, -0.0092, -0.014, -0.0169, -0.033, -0.0274, -0.0303, -0.0391, -0.0415, -0.0359, -0.0038, -0.0056, -0.0094, -0.0092]
    #西安的X轴
    list_xian_one = ['1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1219', '1220', '1221']

    list_xian_two = ['1222', '1223', '1224', '1225', '1226', '1227', '1228', '1229', '1230', '1231', '0101', '0102', '0103', '0104', '0105', '0106', '0107', '0108', '0109', '0110', '0111', '0112', '0113', '0114', '0115', '0116', '0117', '0118', '0119', '0120', '0121', '0122', '0123', '0124', '0125', '0126', '0127', '0128', '0129', '0130', '0131', '0201', '0202', '0203', '0204', '0205', '0206', '0207', '0208', '0209', '0210', '0211', '0212', '0213', '0214', '0215']



    print(len(first_average_new_xian_propotion))
    list_day = getdaylist(20210101,20210224)

    # function_encapsulation(first_average_new_xian_propotion,first_degree_new_xian_propotion,
    #                        first_edge_number_new_xian_propotion,first_nature_connecty_new_xian_propotion
    #                        ,list_day)

    # print(len(getdaylist(20211223, 20220111)))

    print(getdaylist(20211201, 20220215))
    list_test = ['1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1219', '1220', '1221', '1222', '1223', '1224', '1225', '1226', '1227', '1228', '1229', '1230', '1231', '0101', '0102', '0103', '0104', '0105', '0106', '0107', '0108', '0109', '0110', '0111', '0112', '0113', '0114', '0115', '0116', '0117', '0118', '0119', '0120', '0121', '0122', '0123', '0124', '0125', '0126', '0127', '0128', '0129', '0130', '0131', '0201', '0202', '0203', '0204', '0205', '0206', '0207', '0208', '0209', '0210', '0211', '0212', '0213', '0214', '0215']

    list1111=[]
    for i in list_test:
        list1111.append(i[4:])
    print(list1111)