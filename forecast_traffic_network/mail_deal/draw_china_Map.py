# -*- coding: utf-8 -*-
"""
Created on Fri Apr  1 08:42:33 2022

@author: ShengyueJiang
"""
import csv

import numpy as np
import networkx as nx
import math
from scipy.spatial import distance

 # 导入所需的库

import matplotlib.pyplot as plt
import requests
import json

# 导入所需的库
import networkx as nx
import matplotlib.pyplot as plt
import json

# from pyecharts import options as opts
# from pyecharts.charts import Geo
# from pyecharts.globals import ChartType
import requests

import networkx as nx
import matplotlib.pyplot as plt
def get_city_coordinates(country, cities):
    base_url = "http://api.geonames.org/searchJSON"
    username = "wuhao"  # 替换为您自己的GeoNames用户名

    coordinates = {}

    for city in cities:
        params = {
            "q": city,
            "country": country,
            "maxRows": 1,
            "username": username,
        }

        try:
            response = requests.get(base_url, params=params, timeout=10)  # 超时设置为10秒
        except:
            for i in range(4):  # 循环去请求网站
                response = requests.get(base_url, params=params, timeout=20)
                if response.status_code == 200:
                    break


        data = response.json()

        if "geonames" in data and data["geonames"]:
            lat = data["geonames"][0]["lat"]
            lng = data["geonames"][0]["lng"]
            coordinates[city] = (float(lat), float(lng))

    return coordinates


# 选择您感兴趣的中国城市
china_cities = [
    '北京', '天津', '兴安盟', '定安', '屯昌', '澄迈', '临高', '海东地区', '香港', '澳门', '昌都地区', '山南地区', '日喀则地区', '那曲地区', '林芝地区', '吐鲁番地区', '铜仁地区', '毕节地区', '广西壮族自治区', '内蒙古自治区', '宁夏回族自治区', '新疆维吾尔自治区', '西藏自治区', '石家庄', '唐山', '秦皇岛', '邯郸', '邢台', '保定', '张家口', '承德', '沧州', '廊坊', '衡水', '太原', '大同', '阳泉', '长治', '晋城', '朔州', '晋中', '运城', '忻州', '临汾', '吕梁', '呼和浩特', '包头', '乌海', '赤峰', '通辽', '鄂尔多斯', '呼伦贝尔', '巴彦淖尔', '乌兰察布', '沈阳', '大连', '鞍山', '抚顺', '本溪', '丹东', '锦州', '营口', '阜新', '辽阳', '盘锦', '铁岭', '朝阳', '葫芦岛', '长春', '吉林', '四平', '辽源', '通化', '白山', '松原', '白城', '哈尔滨', '齐齐哈尔', '鸡西', '鹤岗', '双鸭山', '大庆', '伊春', '佳木斯', '七台河', '牡丹江', '黑河', '绥化', '上海', '南京', '无锡', '徐州', '常州', '苏州', '南通', '连云港', '淮安', '盐城', '扬州', '镇江', '泰州', '宿迁', '浙江', '杭州', '宁波', '温州', '嘉兴', '湖州', '绍兴', '金华', '衢州', '舟山', '台州', '丽水', '合肥', '芜湖', '蚌埠', '淮南', '马鞍山', '淮北', '铜陵', '安庆', '黄山', '滁州', '阜阳', '宿州', '六安', '亳州', '池州', '宣城', '福州', '厦门', '莆田', '三明', '泉州', '漳州', '南平', '龙岩', '宁德', '南昌', '景德镇', '萍乡', '九江', '新余', '鹰潭', '赣州', '吉安', '宜春', '抚州', '上饶', '济南', '莱芜', '青岛', '淄博', '枣庄', '东营', '烟台', '潍坊', '济宁', '泰安', '威海', '日照', '临沂', '德州', '聊城', '滨州', '菏泽', '郑州', '开封', '洛阳', '平顶山', '安阳', '鹤壁', '新乡', '焦作', '濮阳', '许昌', '漯河', '三门峡', '南阳', '商丘', '信阳', '周口', '驻马店', '武汉', '黄石', '十堰', '宜昌', '襄阳', '鄂州', '荆门', '孝感', '荆州', '黄冈', '咸宁', '随州', '仙桃', '潜江', '天门', '长沙', '株洲', '湘潭', '衡阳', '邵阳', '岳阳', '常德', '张家界', '益阳', '郴州', '永州', '怀化', '娄底', '广州', '韶关', '深圳', '珠海', '汕头', '佛山', '江门', '湛江', '茂名', '肇庆', '惠州', '梅州', '汕尾', '河源', '阳江', '清远', '东莞', '济源', '中山', '潮州', '揭阳', '云浮', '南宁', '柳州', '桂林', '梧州', '北海', '防城港', '钦州', '贵港', '玉林', '百色', '贺州', '河池', '来宾', '崇左', '海口', '三亚', '三亚', '五指山', '琼海', '儋州', '文昌', '万宁', '东方', '重庆', '成都', '自贡', '攀枝花', '泸州', '德阳', '绵阳', '广元', '遂宁', '内江', '乐山', '南充', '眉山', '宜宾', '广安', '达州', '雅安', '巴中', '资阳', '贵阳', '六盘水', '遵义', '安顺', '昆明', '曲靖', '玉溪', '保山', '昭通', '丽江', '临沧', '普洱', '拉萨', '西安', '铜川', '宝鸡', '咸阳', '渭南', '延安', '汉中', '榆林', '安康', '商洛', '兰州', '嘉峪关', '金昌', '白银', '天水', '武威', '张掖', '平凉', '酒泉', '庆阳', '定西', '陇南', '西宁', '银川', '石嘴山', '吴忠', '固原', '中卫', '乌鲁木齐', '克拉玛依', '石河子', '阿拉尔', '图木舒克', '五家渠', '北屯', '铁门关', '双河', '可克达拉', '昆玉', '恩施土家族苗族自治州', '延边朝鲜族自治州', '神农架林区', '湘西土家族苗族自治州', '大兴安岭地区', '白沙黎族自治县', '昌江黎族自治县', '乐东黎族自治县', '陵水黎族自治县', '保亭黎族苗族自治县', '琼中黎族苗族自治县', '阿坝藏族羌族自治州', '甘孜藏族自治州', '凉山彝族自治州', '黔西南布依族苗族自治州', '黔东南苗族侗族自治州', '黔南布依族苗族自治州', '楚雄彝族自治州', '红河哈尼族彝族自治州', '文山壮族苗族自治州', '西双版纳傣族自治州', '大理白族自治州', '德宏傣族景颇族自治州', '怒江傈僳族自治州', '迪庆藏族自治州', '阿里地区', '临夏回族自治州', '甘南藏族自治州', '海北藏族自治州', '黄南藏族自治州', '海南藏族自治州', '果洛藏族自治州', '玉树藏族自治州', '海西蒙古族藏族自治州', '昌吉回族自治州', '博尔塔拉蒙古自治州', '巴音郭楞蒙古自治州', '哈密地区', '阿克苏地区', '克孜勒苏柯尔克孜自治州', '伊犁哈萨克自治州', '喀什地区', '和田地区', '塔城地区', '阿勒泰地区', '锡林郭勒盟', '阿拉善盟'

]
file_origion= r"F:/封城数据处理/forecast_traffic_network/data/"
file_order = ["city_name","Longitude","Latitude"]
china_coordinates = get_city_coordinates("CN", china_cities)
with open(file_origion + "/china_geo_coor.csv", 'w', encoding="utf-8", newline='') as csvfile:
    writer = csv.DictWriter(csvfile, file_order)
    writer.writeheader()
    for city, coords in china_coordinates.items():
        row = {"city_name": city,
               "Longitude": coords[1],  # 经度
               "Latitude": coords[0]  #维度
               }
        writer.writerow(row)

# '北京', '天津', '兴安盟', '定安', '屯昌', '澄迈', '临高', '海东地区', '香港', '澳门', '昌都地区', '山南地区', '日喀则地区', '那曲地区', '林芝地区', '吐鲁番地区', '铜仁地区', '毕节地区', '广西壮族自治区', '内蒙古自治区', '宁夏回族自治区', '新疆维吾尔自治区', '西藏自治区', '石家庄', '唐山', '秦皇岛', '邯郸', '邢台', '保定', '张家口', '承德', '沧州', '廊坊', '衡水', '太原', '大同', '阳泉', '长治', '晋城', '朔州', '晋中', '运城', '忻州', '临汾', '吕梁', '呼和浩特', '包头', '乌海', '赤峰', '通辽', '鄂尔多斯', '呼伦贝尔', '巴彦淖尔', '乌兰察布', '沈阳', '大连', '鞍山', '抚顺', '本溪', '丹东', '锦州', '营口', '阜新', '辽阳', '盘锦', '铁岭', '朝阳', '葫芦岛', '长春', '吉林', '四平', '辽源', '通化', '白山', '松原', '白城', '哈尔滨', '齐齐哈尔', '鸡西', '鹤岗', '双鸭山', '大庆', '伊春', '佳木斯', '七台河', '牡丹江', '黑河', '绥化', '上海', '南京', '无锡', '徐州', '常州', '苏州', '南通', '连云港', '淮安', '盐城', '扬州', '镇江', '泰州', '宿迁', '浙江', '杭州', '宁波', '温州', '嘉兴', '湖州', '绍兴', '金华', '衢州', '舟山', '台州', '丽水', '合肥', '芜湖', '蚌埠', '淮南', '马鞍山', '淮北', '铜陵', '安庆', '黄山', '滁州', '阜阳', '宿州', '六安', '亳州', '池州', '宣城', '福州', '厦门', '莆田', '三明', '泉州', '漳州', '南平', '龙岩', '宁德', '南昌', '景德镇', '萍乡', '九江', '新余', '鹰潭', '赣州', '吉安', '宜春', '抚州', '上饶', '济南', '莱芜', '青岛', '淄博', '枣庄', '东营', '烟台', '潍坊', '济宁', '泰安', '威海', '日照', '临沂', '德州', '聊城', '滨州', '菏泽', '郑州', '开封', '洛阳', '平顶山', '安阳', '鹤壁', '新乡', '焦作', '濮阳', '许昌', '漯河', '三门峡', '南阳', '商丘', '信阳', '周口', '驻马店', '武汉', '黄石', '十堰', '宜昌', '襄阳', '鄂州', '荆门', '孝感', '荆州', '黄冈', '咸宁', '随州', '仙桃', '潜江', '天门', '长沙', '株洲', '湘潭', '衡阳', '邵阳', '岳阳', '常德', '张家界', '益阳', '郴州', '永州', '怀化', '娄底', '广州', '韶关', '深圳', '珠海', '汕头', '佛山', '江门', '湛江', '茂名', '肇庆', '惠州', '梅州', '汕尾', '河源', '阳江', '清远', '东莞', '济源', '中山', '潮州', '揭阳', '云浮', '南宁', '柳州', '桂林', '梧州', '北海', '防城港', '钦州', '贵港', '玉林', '百色', '贺州', '河池', '来宾', '崇左', '海口', '三亚', '三亚', '五指山', '琼海', '儋州', '文昌', '万宁', '东方', '重庆', '成都', '自贡', '攀枝花', '泸州', '德阳', '绵阳', '广元', '遂宁', '内江', '乐山', '南充', '眉山', '宜宾', '广安', '达州', '雅安', '巴中', '资阳', '贵阳', '六盘水', '遵义', '安顺', '昆明', '曲靖', '玉溪', '保山', '昭通', '丽江', '临沧', '普洱', '拉萨', '西安', '铜川', '宝鸡', '咸阳', '渭南', '延安', '汉中', '榆林', '安康', '商洛', '兰州', '嘉峪关', '金昌', '白银', '天水', '武威', '张掖', '平凉', '酒泉', '庆阳', '定西', '陇南', '西宁', '银川', '石嘴山', '吴忠', '固原', '中卫', '乌鲁木齐', '克拉玛依', '石河子', '阿拉尔', '图木舒克', '五家渠', '北屯', '铁门关', '双河', '可克达拉', '昆玉', '恩施土家族苗族自治州', '延边朝鲜族自治州', '神农架林区', '湘西土家族苗族自治州', '大兴安岭地区', '白沙黎族自治县', '昌江黎族自治县', '乐东黎族自治县', '陵水黎族自治县', '保亭黎族苗族自治县', '琼中黎族苗族自治县', '阿坝藏族羌族自治州', '甘孜藏族自治州', '凉山彝族自治州', '黔西南布依族苗族自治州', '黔东南苗族侗族自治州', '黔南布依族苗族自治州', '楚雄彝族自治州', '红河哈尼族彝族自治州', '文山壮族苗族自治州', '西双版纳傣族自治州', '大理白族自治州', '德宏傣族景颇族自治州', '怒江傈僳族自治州', '迪庆藏族自治州', '阿里地区', '临夏回族自治州', '甘南藏族自治州', '海北藏族自治州', '黄南藏族自治州', '海南藏族自治州', '果洛藏族自治州', '玉树藏族自治州', '海西蒙古族藏族自治州', '昌吉回族自治州', '博尔塔拉蒙古自治州', '巴音郭楞蒙古自治州', '哈密地区', '阿克苏地区', '克孜勒苏柯尔克孜自治州', '伊犁哈萨克自治州', '喀什地区', '和田地区', '塔城地区', '阿勒泰地区', '锡林郭勒盟', '阿拉善盟'


def draw_Map(edgeInfo_file):
    # 创建一个空的图形
    G = nx.Graph()

    # 添加中国各个城市作为节点，使用城市名称作为节点标签
    cities = {
        '北京': (116.3974, 39.9096),
        '上海': (121.4737, 31.2304),
        '广州': (113.2644, 23.1291),
        # 添加更多城市...
    }

    for city, pos in cities.items():
        G.add_node(city, pos=pos)

    # 添加城市之间的连接关系（边）
    connections = [
        ('北京', '上海'),
        ('北京', '广州'),
        ('上海', '广州'),
        # 添加更多连接...
    ]

    for connection in connections:
        G.add_edge(*connection)

    # 绘制中国城市地理位置分布的 Pyecharts 地图
    geo = Geo(init_opts=opts.InitOpts(width="800px", height="600px"))
    geo.add_schema(maptype="china")
    geo.add(
        "Cities",
        [(city, 1) for city in cities],
        type_=ChartType.EFFECT_SCATTER,
        color="blue",
        label_opts=opts.LabelOpts(formatter="{b}"),
    )
    geo.set_global_opts(title_opts=opts.TitleOpts(title="China City Map"))
    geo.render("china_city_map.html")

    # 使用 NetworkX 绘制城市间的连边
    pos = nx.get_node_attributes(G, 'pos')
    nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5, edge_color='gray')

    # 显示图形
    plt.title("China City Connections")
    plt.axis('off')
    plt.show()
